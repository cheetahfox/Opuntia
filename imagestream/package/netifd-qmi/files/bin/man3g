#!/bin/bash

function usage() {
	echo "usage: man3g -i {config name} command"
	echo "Commands: status"
	echo "Example: man3g -i wwan status"
	exit 1
}

function status() {
	STATS_TMP="/tmp/qmi_stats.$$"
	STATS_TMP2="/tmp/qmi_stats2.$$"
	CACHEF="/tmp/man3g.cache"

	CUR=`cat /proc/uptime | awk '{ print $1 }' | cut -d '.' -f 1`
	CACHE_EXPIRE=$((CUR))
	if [ -f ${CACHEF} ] ; then
		. ${CACHEF}
	fi
	if [ $((CUR)) -ge $((CACHE_EXPIRE)) ] ; then
		do_lock
		uqmi -d ${CDCDEV} --get-serving-system > ${STATS_TMP}
		msisdn=`qmicli -d ${CDCDEV} --dms-get-msisdn | grep MSISDN: | awk '{print $2}' | cut -d "'" -f 2`
		t_mode=`qmicli -d ${CDCDEV} --dms-get-operating-mode | grep Mode:`
		mode=`echo $t_mode | awk '{print $2}' | cut -d "'" -f 2`
		power_mode=`echo $t_mode | cut -d ':' -f 2 | cut -d "'" -f 2`
		data_session=`qmicli -d ${CDCDEV} --wds-get-packet-service-status | grep status: | cut -d ':' -f 2 | cut -d "'" -f 2`
		data_bearer=`qmicli -d ${CDCDEV} --wds-get-current-data-bearer-technology 2>/dev/null | grep Technology: | cut -d ':' -f 2 | awk '{print toupper($0)}' | cut -d "'" -f 2`
		qmicli -d ${CDCDEV} --nas-get-signal-strength > ${STATS_TMP2}
		csq=`gcom -d ${MODEMDEV} -s /etc/gcom/man3g_csq.gcom | head -n 1 | cut -d "," -f 1`
		lac=`gcom -d ${MODEMDEV} -s /etc/gcom/man3g_lac.gcom | head -n 1 | cut -d "," -f 3-4`
		do_unlock
		carrier=`grep description ${STATS_TMP} | awk '{print $2}' | cut -d '"' -f 2 | cut -d ',' -f 1`
		registration=`grep registration ${STATS_TMP} | awk '{print $2}' | cut -d '"' -f 2 | cut -d ',' -f 1`
		mcc=`grep mcc ${STATS_TMP} | awk '{print $2}' | cut -d '"' -f 2 | cut -d ',' -f 1`
		mnc=`grep mnc ${STATS_TMP} | awk '{print $2}' | cut -d '"' -f 2 | cut -d ',' -f 1`
		roaming=`grep roaming ${STATS_TMP} | awk '{print $2}' | cut -d '"' -f 2 | cut -d ',' -f 1`
		rssi_net=`grep Network ${STATS_TMP2} | head -n 1 | awk '{print toupper($2)}' | cut -d "'" -f 2`
		rssi_val=`grep Network ${STATS_TMP2} | head -n 1 | awk '{print $3}' | cut -d "'" -f 2`
		rssi_eico=`grep -A 1 ECIO ${STATS_TMP2} | tail -n 1 | awk '{print $3}' | cut -d "'" -f 2`
		rssi_sinr=`grep SINR: ${STATS_TMP2} | awk '{print $3}' | cut -d "'" -f 2`
		csq_pct=$(((csq*100)/31))
		ci=`echo $lac | cut -d "," -f 2 | cut -d '"' -f 2`
		lac=`echo $lac | cut -d "," -f 1 | cut -d '"' -f 2`
		rm -f ${STATS_TMP}
		rm -f ${STATS_TMP2}
		cat << EOM > ${CACHEF}
CACHE_EXPIRE=$((CUR+30))
carrier="$carrier"
registration="$registration"
mcc="$mcc"
mnc="$mnc"
roaming="$roaming"
msisdn="$msisdn"
mode="$mode"
power_mode="$power_mode"
data_session="$data_session"
csq="$csq"
csq_pct="$csq_pct"
lac="$lac"
ci="$ci"
data_bearer="$data_bearer"
rssi_net="$rssi_net"
rssi_val="$rssi_val"
rssi_eico="$rssi_eico"
rssi_sinr="$rssi_sinr"
EOM
	fi

	data_session_connect=`ubus call network.interface.wwan status | grep uptime | cut -d : -f 2 | cut -d , -f 1`
	if [ "$data_session_connect" = "" ] || [ $((data_session_connect)) -eq 0 ] ; then
		data_session="disconnected"
	fi

	if [ $((rssi_val)) -ge -90 ] ; then
		rssi_bars="XXXX"
	elif [ $((rssi_val)) -ge -97 ] ; then
		rssi_bars="XXX"
	elif [ $((rssi_val)) -ge -103 ] ; then
		rssi_bars="XX"
	elif [ $((rssi_val)) -ge -107 ] ; then
		rssi_bars="X"
	else
		rssi_bars="0"
	fi

	if [ "$roaming" = "false" ] ; then
		network="Home"
		roaming_val=1
	else
		network="Roaming"
		roaming_val=0
	fi

	apn=`uci get network.wwan.apn`

	if [ "$machine" = "0" ] ; then
		echo "Carrier: ${carrier} (MCC ${mcc}, MNC ${mnc})"
		echo "APN: ${apn}"
		if [ "$lac" != "" ] ; then
			echo "Location code: ${lac}, Cell ID: ${ci}"
		fi
		echo "Mobile number: ${msisdn}"
		echo "State: ${registration^}"
		echo "Power Mode: ${power_mode^}"
		echo "Radio Service type: ${rssi_net}"
		echo "Data Bearer Technology: ${data_bearer}"
		echo "Data session: ${data_session^}"
		if [ "$data_session_connect" != "" ] && [ $((data_session_connect)) -gt 0 ] ; then
			now=`date +"%s"`
			let connect_date=$((now-data_session_connect))
			data_session_connect=`date --date="${connect_date}" -D "%s" +"%a %b %e %H:%M:%S %Y"`
			echo "Connected since ${data_session_connect}"
		fi
		echo "Network: ${network}"
		echo "Signal quality: $csq/31 ($csq_pct%)"
		echo "Signal strength (${rssi_net}): ${rssi_val}dBm, bars: ${rssi_bars}"
		echo "Signal EC/IO, SINR: ${rssi_eico}dBm, ${rssi_sinr}dB"
	else
		case $registration in
			registered*)
				registration=1
			;;
			*searching*)
				registration=2
			;;
			*)
				registration=0
			;;
		esac
		case $data_session in
			connected*)
				data_session=2
			;;
			*)
				data_session=1
			;;
		esac
		case $data_bearer in
			*GPRS*)
				data_bearer=3
			;;
			*WCDMA*)
				data_bearer=4
			;;
			*EDGE*)
				data_bearer=6
			;;
			*HSDPA*|*HSUPA*|*HSPA*)
				data_bearer=9
			;;
			*)
				data_bearer=0
			;;
		esac
                echo "${carrier}"
		echo "${rssi_net}"
		echo "${mcc}"
		echo "${mnc}"
		echo "${rssi_val}"
		echo "0"
		echo "0"
		echo "${apn}"
		echo "${csq}"
		echo "${data_bearer}"
		echo "0"
		echo "${registration}"
		echo "${data_session}"
		echo "$((data_session_connect*100))"
		echo "${roaming_val}"
		echo "${msisdn}"
		echo "${lac}"
		echo "${ci}"
	fi	
}

display_sms() {
	id=$1
	if [ "$machine" = "0" ] ; then
		echo -n "Message $((id+1)) "
		uqmi -d $CDCDEV --get-message $id 2>/dev/null
	else
		SMS_TMP="/tmp/man3g_sms.$$"
		uqmi -d $CDCDEV --get-message $id > $SMS_TMP 2>/dev/null
		# ID, Status, SMSC, Sender, Date, Message
		echo "$((id+1))"
		echo "0"
		while read line
		do
			read line
			echo "$line" | grep '"smsc":' | awk '{print $2}' | cut -d ',' -f 1
			read line
			echo "$line" | grep '"sender":' | awk '{print $2}' | cut -d ',' -f 1
			read line
			ts=`echo "$line" | grep '"timestamp":' | cut -d ',' -f 1 | awk '{print $2","$3}'`
			tzo=`date +%z`
			# Ok this needs explaining. The output should look like: "2010-12-13,18:43:49.0,-06:00"
			# The ts string looks like: "2010-12-13,18:43:49" so I use a neat bash substring trick to
			# print all but the last character of ts (substring start at 0 through length -1) and
			# also split the timezone from -0600 to the format -06:00.
			echo "${ts:0:(-1)}.0,${tzo:0:3}:${tzo:3}\""
			read -r line
			message=`echo -E "$line" | grep '"text":' | cut -d ':' -f 2- | cut -b 2-`
			echo ${#message}
			echo -E $message
			break
		done < ${SMS_TMP}
		rm -f ${SMS_TMP}
	fi
}

display_sms_all() {
	
	MSG_LIST=`uqmi -d $CDCDEV --list-messages | sed 's/,//g'`
	for idx in $MSG_LIST ; do
		case $idx in
			''|*[!0-9]*) ;;
			*)
				display_sms $idx
			;;
		esac
	done
}

send_sms() {
	export SMS_NUMBER="$number"
	export SMS_MESSAGE="$message"
	id=`gcom -d ${MODEMDEV} -s /etc/gcom/man3g_sendsms.gcom`
	RET="$?"
	if [ "$RET" = "0" ] ; then
		echo "SMS message sent with id $id"
	elif [ "$RET" = "1" ] ; then
		echo "Unable to send SMS message, error $id"
	else
		echo "Unable to send SMS message, unable to communicate with modem!"
	fi
}

LCKFILE="/var/run/man3g.pid"

do_lock() {
    let cnt=600
    LAST_PID=0
    while [ $((cnt)) -ge 0 ] ; do
  	if [ -e ${LCKFILE} ] ; then
		PID=$(cat ${LCKFILE} 2>/dev/null)
		if [ "$PID" == "$$" ] ; then
			return
		fi
        	kill -0 ${PID} > /dev/null 2>&1
        	if [ "$?" = "0" ] ; then
			if [ "$machine" = "0" ] && [ $((cnt % 50)) -eq 0 ] ; then
                		echo "Waiting for another man3g process to finish... (pid ${PID})"
			fi
        	else
			if [ "${LAST_PID}" = "${PID}" ] ; then
				if [ "$machine" = "0" ] ; then
                			echo "Stale lock file from pid ${PID}! Process is not running. Removing lock..."
					break
				fi
			fi
        	fi
		LAST_PID=${PID}
		usleep 100000
	else
		break
	fi
	let cnt=cnt-1
    done
    trap do_exit SIGINT SIGHUP SIGTERM
    echo "$$" > ${LCKFILE}
    # verify that we got it!
    do_lock
    LOCKED=1
    logger "Man3g: PID $$ took lock..."
}

do_unlock() {
    rm -f ${LCKFILE}
    LOCKED=0
    logger "Man3g: PID $$ released lock..."
}

do_exit() {
    if [ "$LOCKED" = "1" ] ; then
    	do_unlock
    fi
    exit
}

DEVICE=wwan0
if [ "$1" = "-i" ] ; then
	shift
	DEVICE=$1
	shift
fi
CDCDEV=/dev/$(basename $(ls /sys/class/net/${DEVICE}/device/usbmisc/cdc-wdm* -d))
MODEMDEV=/dev/$(basename $(ls /sys/class/net/${DEVICE}/device/subsystem/drivers/qcserial/*.2/ttyUSB* -d))

if [ "$1" = "" ] ; then
	usage
fi
machine=0
msgid=-1
while [ $# -gt 0 ] ; do
	if [ "$1" = "--machine" ] ; then
		machine=1
	elif [ "$1" = "--msgid" ] ; then
		shift
		msgid=$1
		let msgid=msgid-1
	elif [ "$1" = "--to" ] || [ "$1" = "--number" ] ; then
		shift
		number=$1
	elif [ "$1" = "--message" ] ; then
		shift
		message=$1
	else
		cmd=$1
	fi
	shift
done

case $cmd in
	status)
		status
	;;
	display-sms)
		do_lock
		if [ $((msgid)) -ge 0 ] ; then
			display_sms $msgid
		else
			display_sms_all
		fi
		do_unlock
	;;
	send-sms)
		if [ "$number" = "" ] ; then
			echo "Must specify recipient mobile number with --to!"
			exit 1
		fi
		if [ "$message" = "" ] ; then
			echo "Must specify a message with --message!"
			exit 1
		fi
		do_lock
		send_sms
		do_unlock
	;;
	*)
		usage
	;;
esac
