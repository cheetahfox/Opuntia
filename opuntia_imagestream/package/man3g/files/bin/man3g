#!/bin/bash

function usage() {
	echo "usage: man3g -i {config name} command"
	echo "Commands: status"
	echo "Example: man3g -i lte1 status"
	exit 1
}

function status() {
	STATS_TMP="/tmp/qmi_stats.$$"
	STATS_TMP2="/tmp/qmi_stats2.$$"
	CACHEF="/tmp/man3g-${DEVICE}.cache"

	CUR=`cat /proc/uptime | awk '{ print $1 }' | cut -d '.' -f 1`
	CACHE_EXPIRE=$((CUR))
	if [ -f ${CACHEF} ] ; then
		. ${CACHEF}
	fi
	if [ $((CUR)) -ge $((CACHE_EXPIRE)) ] ; then
		if [ "${CDCDEV}" == "" ] ; then
			let tries=1
			while [ $((tries)) -ge 0 ] ; do
				do_lock
				eval $(gcom -d ${MODEMDEV} -s /etc/gcom/man3g_getall.gcom) 2>/dev/null
				res="$?"
				do_unlock
				[ "$res" = "0" ] && break
				let tries=tries-1
				sleep 1
			done
			[ $((tries)) -le 0 ] && {
				echo "Failed to communicate with radio!"
				exit 1
			}
			csq_pct=$(((csq*100)/31))
		else
			do_lock
			uqmi -d ${CDCDEV} --get-serving-system > ${STATS_TMP}
			msisdn=`qmicli -d ${CDCDEV} --dms-get-msisdn | grep MSISDN: | awk '{print $2}' | cut -d "'" -f 2`
			t_mode=`qmicli -d ${CDCDEV} --dms-get-operating-mode | grep Mode:`
			mode=`echo $t_mode | awk '{print $2}' | cut -d "'" -f 2`
			power_mode=`echo $t_mode | cut -d ':' -f 2 | cut -d "'" -f 2`
			data_session=`qmicli -d ${CDCDEV} --wds-get-packet-service-status | grep status: | cut -d ':' -f 2 | cut -d "'" -f 2`
			data_bearer=`qmicli -d ${CDCDEV} --wds-get-current-data-bearer-technology 2>/dev/null | grep Technology: | cut -d ':' -f 2 | awk '{print toupper($0)}' | cut -d "'" -f 2`
			qmicli -d ${CDCDEV} --nas-get-signal-strength > ${STATS_TMP2}
			csq=`gcom -d ${MODEMDEV} -s /etc/gcom/man3g_csq.gcom | head -n 1 | cut -d "," -f 1`
			lac=`gcom -d ${MODEMDEV} -s /etc/gcom/man3g_lac.gcom | head -n 1 | cut -d "," -f 3-4`
			do_unlock
			carrier=`grep description ${STATS_TMP} | awk '{print $2}' | cut -d '"' -f 2 | cut -d ',' -f 1`
			registration=`grep registration ${STATS_TMP} | awk '{print $2}' | cut -d '"' -f 2 | cut -d ',' -f 1`
			mcc=`grep mcc ${STATS_TMP} | awk '{print $2}' | cut -d '"' -f 2 | cut -d ',' -f 1`
			mnc=`grep mnc ${STATS_TMP} | awk '{print $2}' | cut -d '"' -f 2 | cut -d ',' -f 1`
			roaming=`grep roaming ${STATS_TMP} | awk '{print $2}' | cut -d '"' -f 2 | cut -d ',' -f 1`
			rssi_net=`grep Network ${STATS_TMP2} | head -n 1 | awk '{print toupper($2)}' | cut -d "'" -f 2`
			rssi_val=`grep Network ${STATS_TMP2} | head -n 1 | awk '{print $3}' | cut -d "'" -f 2`
			rssi_eico=`grep -A 1 ECIO ${STATS_TMP2} | tail -n 1 | awk '{print $3}' | cut -d "'" -f 2`
			rssi_sinr=`grep SINR: ${STATS_TMP2} | awk '{print $3}' | cut -d "'" -f 2`
			csq_pct=$(((csq*100)/31))
			ci=`echo $lac | cut -d "," -f 2 | cut -d '"' -f 2`
			lac=`echo $lac | cut -d "," -f 1 | cut -d '"' -f 2`
			rm -f ${STATS_TMP}
			rm -f ${STATS_TMP2}
		fi
		cat << EOM > ${CACHEF}
CACHE_EXPIRE=$((CUR+10))
carrier="$carrier"
registration="$registration"
mcc="$mcc"
mnc="$mnc"
roaming="$roaming"
msisdn="$msisdn"
mode="$mode"
power_mode="$power_mode"
data_session="$data_session"
csq="$csq"
csq_pct="$csq_pct"
lac="$lac"
ci="$ci"
data_bearer="$data_bearer"
rssi_net="$rssi_net"
rssi_val="$rssi_val"
rsrp="$rsrp"
rsrq="$rsrq"
ecio="$ecio"
rssnr="$rssnr"
EOM
	fi

	data_session_connect=$(ubus call network.interface.$DEVICE status | grep uptime | cut -d : -f 2 | cut -d , -f 1)
	if [ "$data_session_connect" = "" ] || [ $((data_session_connect)) -eq 0 ] ; then
		data_session="disconnected"
	fi

	rssi_val=$((rssi_val / 10))
	rsrp=$((rsrp / 10))
	if [ "$rssi_net" = "EUTRAN" ] ; then
		if [ $((rsrp)) -ge -85 ] ; then
			rssi_bars="XXXX"
		elif [ $((rsrp)) -ge -95 ] ; then
			rssi_bars="XXX"
		elif [ $((rsrp)) -ge -105 ] ; then
			rssi_bars="XX"
		elif [ $((rsrp)) -ge -115 ] ; then
			rssi_bars="X"
		else
			rssi_bars="0"
		fi
	elif [ "$rssi_net" = "UMTS" ] ; then
		if [ $((rssi_val)) -ge -80 ] ; then
			rssi_bars="XXXX"
		elif [ $((rssi_val)) -ge -90 ] ; then
			rssi_bars="XXX"
		elif [ $((rssi_val)) -ge -100 ] ; then
			rssi_bars="XX"
		elif [ $((rssi_val)) -ge -106 ] ; then
			rssi_bars="X"
		else
			rssi_bars="0"
		fi
	else
		if [ $((rssi_val)) -ge -80 ] ; then
			rssi_bars="XXXX"
		elif [ $((rssi_val)) -ge -89 ] ; then
			rssi_bars="XXX"
		elif [ $((rssi_val)) -ge -98 ] ; then
			rssi_bars="XX"
		elif [ $((rssi_val)) -ge -104 ] ; then
			rssi_bars="X"
		else
			rssi_bars="0"
		fi
	fi

	if [ "$roaming" = "false" ] ; then
		network="Home"
		roaming_val=1
	else
		network="Roaming"
		roaming_val=0
	fi

	apn=$(uci get network.${DEVICE}.apn 2>/dev/null || echo "Not configured")

	if [ "$machine" = "0" ] ; then
		echo "Device: ${DEVICE}"
		echo "Carrier: ${carrier} (MCC ${mcc}, MNC ${mnc})"
		echo "APN: ${apn}"
		if [ "$lac" != "" ] ; then
			echo "Location code: ${lac}, Cell ID: ${ci}"
		fi
		echo "Mobile number: ${msisdn}"
		echo "State: ${registration^}"
		echo "Power Mode: ${power_mode^}"
		echo "Radio Service type: ${rssi_net}"
		echo "Data Bearer Technology: ${data_bearer}"
		echo "Data session: ${data_session^}"
		if [ "$data_session_connect" != "" ] && [ $((data_session_connect)) -gt 0 ] ; then
			echo "Connected ${data_session_connect}s"
		fi
		echo "Network: ${network}"
		echo "Signal quality: $csq/31 ($csq_pct%)"
		if [ "$rssi_net" = "EUTRAN" ] ; then
			echo "RSSI: ${rssi_val} dBm, RSRP: ${rsrp} dBm, RSRQ: ${rsrq} dB, SINR: ${rssnr} dB"
			echo "Signal strength (${rssi_net}): ${rsrp}dBm, bars: ${rssi_bars}"
		else
			echo "Signal strength (${rssi_net}): ${rssi_val}dBm, bars: ${rssi_bars}"
		fi
	else
		case $registration in
			registered*)
				registration=1
			;;
			*searching*)
				registration=2
			;;
			*)
				registration=0
			;;
		esac
		case $data_session in
			connected*)
				data_session=2
			;;
			*)
				data_session=1
			;;
		esac
		case $data_bearer in
			*GPRS*)
				data_bearer=3
			;;
			*WCDMA*)
				data_bearer=4
			;;
			*EDGE*)
				data_bearer=6
			;;
			*HSDPA*|*HSUPA*|*HSPA*)
				data_bearer=9
			;;
			*LTE*)
				data_bearer=10
			;;
			*)
				data_bearer=0
			;;
		esac
                echo "${carrier}"
		echo "${rssi_net}"
		echo "${mcc}"
		echo "${mnc}"
		echo "${rssi_val}"
		echo "0"
		echo "0"
		echo "${apn}"
		echo "${csq}"
		echo "${data_bearer}"
		echo "0"
		echo "${registration}"
		echo "${data_session}"
		echo "$((data_session_connect*100))"
		echo "${roaming_val}"
		echo "${msisdn}"
		echo "${lac}"
		echo "${ci}"
	fi	
}

do_parse_sms() {
	want_id=$1
	match="$2"
	SMS_TMP="/tmp/man3g_sms.$$"
	gcom -d ${MODEMDEV} -s /etc/gcom/man3g_readallsms.gcom > $SMS_TMP 2>/dev/null
	while : ;
	do
		while : ;
		do
			if [ "${line:0:6}" = "+CMGL:" ] ; then
				break
			fi
			read line || break
		done
		line=`echo ${line:7}`
		id=`echo "$line" | cut -d ',' -f 1`
		if [ "$want_id" != "" ] && [ "$want_id" != "$id" ] ; then
			continue
		fi
		STATUS=`echo "$line" | cut -d ',' -f 2`
		SMSC=""
		SENDER=`echo "$line" | cut -d ',' -f 3`
		ts=`echo "$line" | cut -d ',' -f 5-6`
		# Ok this needs explaining. The output should look like: "2010-12-13,18:43:49.0,-06:00"
		# The ts string looks like: "14/02/03,14:31:46-24" so I use a neat bash substring trick to
		# print all but the last character of ts (substring start at 0 through length -1) and
		# also split the timezone from -0600 to the format -06:00.
		tzo=`date +%z`
		cent=`date +%C`
		ts=`echo "${cent}${ts:1:2}-${ts:4:2}-${ts:7:11}.0,${tzo:0:3}:${tzo:3}"`
		if [ "$machine" = "0" ] ; then
			echo -n "Message "
		fi
		echo "$((id+1))"
		if [ "$machine" = "0" ] ; then
			echo "Status: $STATUS"
		else
			echo "0"
		fi
		if [ "$machine" = "0" ] ; then
			echo -n "SMSC: "
		fi
		echo '""'
		if [ "$machine" = "0" ] ; then
			echo -n "Sender: "
		fi
		echo "$SENDER"
		if [ "$machine" = "0" ] ; then
			echo -n "Date: "
		fi
		echo "\"$ts\""
		if [ "$machine" = "0" ] ; then
			echo -n "Text: "
		fi
		message=""
		while read line
		do
			if [ "${line:0:2}" = "OK" ] || [ "${line:0:6}" = "+CMGL:" ] ; then
				break
			fi
			message="${message} ${line}"
		done
 		message=`echo $message | tr -d '\r'`
		if [ "$machine" = "1" ] ; then
			echo ${#message}
		fi
		echo \"$message\"
		if [ "$machine" = "0" ] ; then
			echo
		fi
		[ "$match" != "" ] && echo "$message" | grep "$match" > /dev/null 2>&1 && found=$((id+1))
		if [ "${line:0:6}" != "+CMGL:" ] ; then
			read line || break
		fi
		if [ "$want_id" == "$id" ] ; then
			break
		fi
	done < ${SMS_TMP}
	rm -f ${SMS_TMP}
}

display_sms() {
	do_parse_sms "$1" "$2"
}

send_sms() {
	export SMS_NUMBER="$number"
	export SMS_MESSAGE="$message"
	id=`gcom -d ${MODEMDEV} -s /etc/gcom/man3g_sendsms.gcom`
	RET="$?"
	if [ "$RET" = "0" ] ; then
		echo "SMS message sent with id $id"
	elif [ "$RET" = "1" ] ; then
		echo "Unable to send SMS message, error $id"
	else
		echo "Unable to send SMS message, unable to communicate with modem!"
	fi
}
delete_sms() {
	id=$1
	export SMS_ID="$id"
	out=`gcom -d ${MODEMDEV} -s /etc/gcom/man3g_deletesms.gcom`
	RET="$?"
	if [ "$RET" = "0" ] ; then
		echo "SMS message $((id+1)) deleted"
	elif [ "$RET" = "1" ] ; then
		echo "Unable to delete SMS message, error $out"
	else
		echo "Unable to delete SMS message, unable to communicate with modem!"
	fi
}

scan() {
        uqmi -d ${CDCDEV} --network-scan
}

# This is a way to reset the modem by removing it from the usb bus, removing the usb hubs and rescanning
# the PCI bus for USB hubs and devices
remove() {
	logger "Removing USB device..."
	echo "Removing USB device..."
	ifdown ${DEVICE}
	sleep 10
	echo 1 > /sys/bus/usb/devices/usb1/remove
	echo 1 > /sys/devices/pci0000:00/0000:00:0f.5/remove
	echo 1 > /sys/devices/pci0000:00/0000:00:0f.4/remove
	logger "Rescanning/adding USB device..."
	echo "Rescanning/adding USB device..."
	echo 1 > /sys/devices/pci0000:00/pci_bus/0000:00/rescan
	sleep 10
	logger "Setting WWAN up..."
	echo "Setting WWAN up..."
	ifup ${DEVICE}
}

LCKFILE="/var/run/man3g.pid"

do_lock() {
    let cnt=600
    LAST_PID=0
    while [ $((cnt)) -ge 0 ] ; do
  	if [ -e ${LCKFILE} ] ; then
		PID=$(cat ${LCKFILE} 2>/dev/null)
		if [ "$PID" == "$$" ] ; then
			return
		fi
        	kill -0 ${PID} > /dev/null 2>&1
        	if [ "$?" = "0" ] ; then
			if [ "$machine" = "0" ] && [ $((cnt % 90)) -eq 0 ] ; then
#                		echo "Waiting for another man3g process to finish... (pid ${PID})"
				:
			fi
        	elif [ -e ${LCKFILE} ] ; then
			# Lock file still exists, see if someone else took it
			usleep 50000
			PID=$(cat ${LCKFILE} 2>/dev/null)
			if [ "${LAST_PID}" = "${PID}" ] ; then
				if [ "$machine" = "0" ] ; then
#                			echo "Stale lock file from pid ${PID}! Process is not running. Removing lock..."
					break
				fi
			fi
		else
			# Lock file gone - process exited, we can grab it
			break
        	fi
		LAST_PID=${PID}
		usleep 100000
	else
		break
	fi
	let cnt=cnt-1
    done
# Don't do this because it screws up locking
#    trap do_exit SIGINT SIGHUP SIGTERM
    echo "$$" > ${LCKFILE}
    # verify that we got it!
    do_lock
    LOCKED=1
#    logger "Man3g: PID $$ took lock..."
}

do_unlock() {
    rm -f ${LCKFILE}
    LOCKED=0
#    logger "Man3g: PID $$ released lock..."
}

do_exit() {
    if [ "$LOCKED" = "1" ] ; then
    	do_unlock
    fi
    exit
}

do_set_device() {
	CDCDEV=""
	devpath=$(uci get network.${DEVICE}.device 2>/dev/null)
	[ -n "$devpath" ] || {
		usb_idx=$(uci get network.${DEVICE}.usb_idx 2>/dev/null)
		[ -n "$usb_idx" ] || return 1
		devpath=$(echo /sys/devices/pci*/*/usb${usb_idx}/*-*/*/*/usbmisc/cdc-wdm*)
		devpath="${devpath}/../../.."
	}
        MODEMDEV="$(readlink -f $devpath/*.2/ttyUSB*)"
	MODEMDEV="/dev/$(basename $MODEMDEV)"
	[ -e ${MODEMDEV} ] && return 0
	return 1
}

if [ "$1" = "-i" ] ; then
	shift
	DEVICE=$1
	shift
fi
if [ "$1" = "" ] ; then
	usage
fi
machine=0
msgid=""
match=""
found=0
while [ $# -gt 0 ] ; do
	if [ "$1" = "--machine" ] ; then
		machine=1
	elif [ "$1" = "--msgid" ] || [ "$1" = "--id" ] ; then
		shift
		msgid=$1
		let msgid=msgid-1
	elif [ "$1" = "--to" ] || [ "$1" = "--number" ] ; then
		shift
		number=$1
	elif [ "$1" = "--message" ] ; then
		shift
		message=$1
	elif [ "$1" = "--match" ] ; then
		shift
		match=$1
	else
		cmd=$1
	fi
	shift
done

case $cmd in
	status)
		DEVICES="${DEVICE}"
		[ -z $DEVICES ] && DEVICES="lte1 lte2"
		let dev_idx=0
		for DEVICE in $DEVICES; do
			[ $dev_idx -gt 0 ] && echo
			do_set_device && status
			let dev_idx=dev_idx+1
		done
	;;
	display-sms)
		do_lock
		display_sms "$msgid" "$match"
		do_unlock
		exit $found
	;;
	delete-sms)
		do_lock
		if [ $((msgid)) -ge 0 ] ; then
			delete_sms $msgid
		fi
		do_unlock
	;;
	send-sms)
		if [ "$number" = "" ] ; then
			echo "Must specify recipient mobile number with --to!"
			exit 1
		fi
		if [ "$message" = "" ] ; then
			echo "Must specify a message with --message!"
			exit 1
		fi
		do_lock
		send_sms
		do_unlock
	;;
	remove)
		# remove
	;;
        scan)
                do_lock
                scan
                do_unlock
        ;;
	*)
		usage
	;;
esac
