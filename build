#!/bin/bash

CMD=$1
ROUTER="$2"
DESTDIR="$3"
RELEASE="$4"
_BUILD_TARGET="$5"

# If a git push fails with an odd error 22, http error 404 or whatever, use this:
# git config http.postBuffer 524288000

function install_img()
{
	if [ "$DESTDIR" = "" ] ; then
		DESTDIR="bin/x86"
	fi
	if [ "$ROUTER" = "" ] ; then
		ROUTER="envoy"
	fi
	if [ "$RELEASE" = "" ] ; then
		if [ "$BUILD_NUMBER" != "" ] ; then
			RELEASE="devel_${BUILD_NUMBER}"
		else
			RELEASE="devel"
		fi
	fi
	mkdir -p "$DESTDIR"
	install bin/x86/opuntia-x86-alix2-combined-squashfs.img "$DESTDIR/opuntia-$ROUTER-${CONFIG_VERSION_NUMBER}_${RELEASE}.img"
	if [ ! -d "$DESTDIR/packages" ] ; then
		mkdir "$DESTDIR/packages"
		cp bin/x86/packages/* "$DESTDIR/packages"
	fi
}

if [ "$_BUILD_TARGET" = "" ] ; then
	if [ "$BUILD_TARGET" = "" ] ; then
		BUILD_TARGET="alix2"
	fi
fi
OPUNTIA_CFG="imagestream/configs/$BUILD_TARGET"
if [ ! -f .config ] ; then
	cp -f $OPUNTIA_CFG .config
elif [ -f .config ] && ! diff .config $OPUNTIA_CFG > /dev/null ; then
	echo "Configuration change detected!"
	echo "Backing up your previous configuration to .config.old..."
	sleep 3
	mv -f .config .config.old
	cp -f $OPUNTIA_CFG .config
fi

# Update feeds if Luci is not present
if [ ! -f feeds/luci.index ] ; then
	./scripts/feeds update -a
	# Feeds script runs defconfig so we need to re-copy .config again.
	cp -f $OPUNTIA_CFG .config
	./scripts/feeds install -a
else
	./scripts/feeds update imagestream
	./scripts/feeds install -a
fi

eval `grep CONFIG_VERSION_NUMBER= .config`
if [ "$BUILD_NUMBER" != "" ] ; then
	echo "$BUILD_NUMBER" > version
	export REVISION="$BUILD_NUMBER"
fi

case "$CMD" in
	install|*)
		# OpenWRT sucks for building in parallel!
		# The toolchain must be single-thread built
		make oldconfig
		NUM_CPUS=$((`cat /proc/cpuinfo | grep bogomips | wc -l` * 2))
		for section in tools/bison/install tools/install toolchain/install target/linux/compile package/cleanup package/compile package/toolchain/compile world ; do
			let retries=2
			while [ $((retries)) -gt 0 ] ; do
				echo "*** Building $section ***"
				make -j $NUM_CPUS $section
				if [ "$?" = "0" ] ; then
					break;
				fi
				echo "Failed to build $section! Probably just a transient error, trying again ($retries left)"
				let retries=retries-1
			done
			if [ $((retries)) -eq 0 ] ; then
				echo "Trying in single-threaded mode..."
				make -j 1 $section
				if [ "$?" = "0" ] ; then
					echo "Success in single-threaded mode!"
				else
					echo "Failed to build after 3 retries, giving up..."
					exit 5
				fi
			fi
		done
		echo "Build successful! Installing image..."
		install_img
		exit 0
#		make tools/install
#		if [ "$?" != "0" ] ; then
#			echo "Failed to build tools! Trying again..."
#			sleep 5
#			make tools/install
#			if [ "$?" != "0" ] ; then
#				echo "Failed to build tools!"
#				exit 5
#			fi
#		fi
#		
#		# The rest can *mostly* be built in parallel
#		let retries=5
#		
#		while [ $((retries)) -gt 0 ] ; do
#			make -j $((`cat /proc/cpuinfo | grep bogomips | wc -l` * 2))
#			if [ "$?" = "0" ] ; then
#				install_img
#				exit 0
#			fi
#			echo "Failed to build! Probably just a transient error, trying again ($retries left)"
#			let retries=retries-1
#		done
#		exit 1
	;;
esac
