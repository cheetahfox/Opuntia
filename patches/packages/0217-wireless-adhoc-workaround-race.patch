Index: build_dir.ev1000/package/network/services/hostapd/Makefile
===================================================================
--- build_dir.ev1000.orig/package/network/services/hostapd/Makefile
+++ build_dir.ev1000/package/network/services/hostapd/Makefile
@@ -90,7 +90,7 @@ space :=
 space +=
 
 ifneq ($(LOCAL_VARIANT),mini)
-  DRIVER_MAKEOPTS += CONFIG_IEEE80211W=$(CONFIG_DRIVER_11W_SUPPORT)
+  DRIVER_MAKEOPTS += CONFIG_IEEE80211W=$(CONFIG_DRIVER_11W_SUPPORT) CONFIG_DEBUG_SYSLOG=y
 endif
 
 ifeq ($(LOCAL_VARIANT),full)
Index: build_dir.ev1000/package/network/services/hostapd/patches/999-scott-wpa_s-debug-workaround-tx_fails.patch
===================================================================
--- /dev/null
+++ build_dir.ev1000/package/network/services/hostapd/patches/999-scott-wpa_s-debug-workaround-tx_fails.patch
@@ -0,0 +1,224 @@
+Index: hostapd-2019-08-08-ca8c2bd2/src/utils/wpa_debug.c
+===================================================================
+--- hostapd-2019-08-08-ca8c2bd2.orig/src/utils/wpa_debug.c
++++ hostapd-2019-08-08-ca8c2bd2/src/utils/wpa_debug.c
+@@ -13,7 +13,7 @@
+ #ifdef CONFIG_DEBUG_SYSLOG
+ #include <syslog.h>
+ 
+-int wpa_debug_syslog = 0;
++int wpa_debug_syslog = 1;
+ #endif /* CONFIG_DEBUG_SYSLOG */
+ 
+ #ifdef CONFIG_DEBUG_LINUX_TRACING
+@@ -29,9 +29,9 @@ static FILE *wpa_debug_tracing_file = NU
+ #endif /* CONFIG_DEBUG_LINUX_TRACING */
+ 
+ 
+-int wpa_debug_level = MSG_INFO;
+-int wpa_debug_show_keys = 0;
+-int wpa_debug_timestamp = 0;
++int wpa_debug_level = MSG_DEBUG;
++int wpa_debug_show_keys = 1;
++int wpa_debug_timestamp = 1;
+ 
+ 
+ #ifdef CONFIG_ANDROID_LOG
+Index: hostapd-2019-08-08-ca8c2bd2/wpa_supplicant/ibss_rsn.c
+===================================================================
+--- hostapd-2019-08-08-ca8c2bd2.orig/wpa_supplicant/ibss_rsn.c
++++ hostapd-2019-08-08-ca8c2bd2/wpa_supplicant/ibss_rsn.c
+@@ -143,7 +143,7 @@ static int supp_set_key(void *ctx, enum
+ {
+ 	struct ibss_rsn_peer *peer = ctx;
+ 
+-	wpa_printf(MSG_DEBUG, "SUPP: %s(alg=%d addr=" MACSTR " key_idx=%d "
++	wpa_printf(MSG_INFO, "SUPP: %s(alg=%d addr=" MACSTR " key_idx=%d "
+ 		   "set_tx=%d)",
+ 		   __func__, alg, MAC2STR(addr), key_idx, set_tx);
+ 	wpa_hexdump(MSG_DEBUG, "SUPP: set_key - seq", seq, seq_len);
+@@ -158,7 +158,7 @@ static int supp_set_key(void *ctx, enum
+ 		 */
+ 		if (os_memcmp(peer->ibss_rsn->wpa_s->own_addr, peer->addr,
+ 			      ETH_ALEN) > 0) {
+-			wpa_printf(MSG_DEBUG, "SUPP: Do not use this PTK");
++			wpa_printf(MSG_INFO, "SUPP: Do not use this PTK");
+ 			return 0;
+ 		}
+ 	}
+@@ -268,7 +268,7 @@ static const u8 * auth_get_psk(void *ctx
+ 		*psk_len = PMK_LEN;
+ 	if (vlan_id)
+ 		*vlan_id = 0;
+-	wpa_printf(MSG_DEBUG, "AUTH: %s (addr=" MACSTR " prev_psk=%p)",
++	wpa_printf(MSG_INFO, "AUTH: %s (addr=" MACSTR " prev_psk=%p)",
+ 		   __func__, MAC2STR(addr), prev_psk);
+ 	if (prev_psk)
+ 		return NULL;
+@@ -303,11 +303,11 @@ static int auth_set_key(void *ctx, int v
+ 	os_memset(seq, 0, sizeof(seq));
+ 
+ 	if (addr) {
+-		wpa_printf(MSG_DEBUG, "AUTH: %s(alg=%d addr=" MACSTR
++		wpa_printf(MSG_INFO, "AUTH: %s(alg=%d addr=" MACSTR
+ 			   " key_idx=%d)",
+ 			   __func__, alg, MAC2STR(addr), idx);
+ 	} else {
+-		wpa_printf(MSG_DEBUG, "AUTH: %s(alg=%d key_idx=%d)",
++		wpa_printf(MSG_INFO, "AUTH: %s(alg=%d key_idx=%d)",
+ 			   __func__, alg, idx);
+ 	}
+ 	wpa_hexdump_key(MSG_DEBUG, "AUTH: set_key - key", key, key_len);
+@@ -328,7 +328,7 @@ static int auth_set_key(void *ctx, int v
+ 		 */
+ 		if (addr == NULL ||
+ 		    os_memcmp(ibss_rsn->wpa_s->own_addr, addr, ETH_ALEN) < 0) {
+-			wpa_printf(MSG_DEBUG, "AUTH: Do not use this PTK");
++			wpa_printf(MSG_INFO, "AUTH: Do not use this PTK");
+ 			return 0;
+ 		}
+ 	}
+@@ -382,7 +382,7 @@ static void ibss_set_sta_authorized(stru
+ 	}
+ 
+ 	if (res && errno != ENOENT) {
+-		wpa_printf(MSG_DEBUG, "Could not set station " MACSTR " flags "
++		wpa_printf(MSG_ERROR, "Could not set station " MACSTR " flags "
+ 			   "for kernel driver (errno=%d)",
+ 			   MAC2STR(peer->addr), errno);
+ 	}
+@@ -424,7 +424,7 @@ static int ibss_rsn_auth_init_group(stru
+ 		.disconnect = ibss_rsn_disconnect,
+ 	};
+ 
+-	wpa_printf(MSG_DEBUG, "AUTH: Initializing group state machine");
++	wpa_printf(MSG_INFO, "AUTH: Initializing group state machine");
+ 
+ 	os_memset(&conf, 0, sizeof(conf));
+ 	conf.wpa = 2;
+@@ -439,7 +439,7 @@ static int ibss_rsn_auth_init_group(stru
+ 
+ 	ibss_rsn->auth_group = wpa_init(own_addr, &conf, &cb, ibss_rsn);
+ 	if (ibss_rsn->auth_group == NULL) {
+-		wpa_printf(MSG_DEBUG, "AUTH: wpa_init() failed");
++		wpa_printf(MSG_ERROR, "AUTH: wpa_init() failed");
+ 		return -1;
+ 	}
+ 
+@@ -454,7 +454,7 @@ static int ibss_rsn_auth_init(struct ibs
+ {
+ 	peer->auth = wpa_auth_sta_init(ibss_rsn->auth_group, peer->addr, NULL);
+ 	if (peer->auth == NULL) {
+-		wpa_printf(MSG_DEBUG, "AUTH: wpa_auth_sta_init() failed");
++		wpa_printf(MSG_ERROR, "AUTH: wpa_auth_sta_init() failed");
+ 		return -1;
+ 	}
+ 
+@@ -466,7 +466,7 @@ static int ibss_rsn_auth_init(struct ibs
+ 				"\x01\x00\x00\x0f\xac\x02"
+ 				"\x00\x00", 22, NULL, 0, NULL, 0) !=
+ 	    WPA_IE_OK) {
+-		wpa_printf(MSG_DEBUG, "AUTH: wpa_validate_wpa_ie() failed");
++		wpa_printf(MSG_ERROR, "AUTH: wpa_validate_wpa_ie() failed");
+ 		return -1;
+ 	}
+ 
+@@ -564,7 +564,7 @@ static void ibss_rsn_auth_timeout(void *
+ 	 * Assume peer does not support Authentication exchange or the frame was
+ 	 * lost somewhere - start EAPOL Authenticator.
+ 	 */
+-	wpa_printf(MSG_DEBUG,
++	wpa_printf(MSG_ERROR,
+ 		   "RSN: Timeout on waiting Authentication frame response from "
+ 		   MACSTR " - start authenticator", MAC2STR(peer->addr));
+ 
+@@ -620,7 +620,7 @@ static int ibss_rsn_peer_authenticated(s
+ 	peer->authentication_status |= reason;
+ 
+ 	if (already_started) {
+-		wpa_printf(MSG_DEBUG, "RSN: IBSS Authenticator already "
++		wpa_printf(MSG_INFO, "RSN: IBSS Authenticator already "
+ 			   "started for peer " MACSTR, MAC2STR(peer->addr));
+ 		return 0;
+ 	}
+@@ -641,7 +641,7 @@ void ibss_rsn_stop(struct ibss_rsn *ibss
+ 
+ 	if (peermac == NULL) {
+ 		/* remove all peers */
+-		wpa_printf(MSG_DEBUG, "%s: Remove all peers", __func__);
++		wpa_printf(MSG_INFO, "%s: Remove all peers", __func__);
+ 		peer = ibss_rsn->peers;
+ 		while (peer) {
+ 			prev = peer;
+@@ -651,7 +651,7 @@ void ibss_rsn_stop(struct ibss_rsn *ibss
+ 		}
+ 	} else {
+ 		/* remove specific peer */
+-		wpa_printf(MSG_DEBUG, "%s: Remove specific peer " MACSTR,
++		wpa_printf(MSG_INFO, "%s: Remove specific peer " MACSTR,
+ 			   __func__, MAC2STR(peermac));
+ 
+ 		for (prev = NULL, peer = ibss_rsn->peers; peer != NULL;
+@@ -776,7 +776,7 @@ static int ibss_rsn_process_rx_eapol(str
+ 		wpa_sm_rx_eapol(peer->supp, peer->addr, tmp, len);
+ 	} else {
+ 		if (ibss_rsn_is_auth_started(peer) == 0) {
+-			wpa_printf(MSG_DEBUG, "RSN: IBSS EAPOL for "
++			wpa_printf(MSG_INFO, "RSN: IBSS EAPOL for "
+ 				   "Authenticator dropped as " MACSTR " is not "
+ 				   "authenticated", MAC2STR(peer->addr));
+ 			os_free(tmp);
+@@ -815,7 +815,7 @@ int ibss_rsn_rx_eapol(struct ibss_rsn *i
+ 			return -1;
+ 
+ 		/* assume the peer is authenticated already */
+-		wpa_printf(MSG_DEBUG, "RSN: IBSS Not using IBSS Auth for peer "
++		wpa_printf(MSG_INFO, "RSN: IBSS Not using IBSS Auth for peer "
+ 			   MACSTR, MAC2STR(src_addr));
+ 		ibss_rsn_peer_authenticated(ibss_rsn, peer,
+ 					    IBSS_RSN_AUTH_EAPOL_BY_US);
+@@ -848,7 +848,7 @@ static void ibss_rsn_handle_auth_1_of_2(
+ 		/* Clear the TK for this pair to allow recovery from the case
+ 		 * where the peer STA has restarted and lost its key while we
+ 		 * still have a pairwise key configured. */
+-		wpa_printf(MSG_DEBUG, "RSN: Clear pairwise key for peer "
++		wpa_printf(MSG_INFO, "RSN: Clear pairwise key for peer "
+ 			   MACSTR, MAC2STR(addr));
+ 		wpa_drv_set_key(ibss_rsn->wpa_s, WPA_ALG_NONE, addr, 0, 0,
+ 				NULL, 0, NULL, 0);
+@@ -861,7 +861,7 @@ static void ibss_rsn_handle_auth_1_of_2(
+ 			os_get_reltime(&now);
+ 			os_reltime_sub(&now, &peer->own_auth_tx, &diff);
+ 			if (diff.sec == 0 && diff.usec < 500000) {
+-				wpa_printf(MSG_DEBUG, "RSN: Skip IBSS reinit since only %u usec from own Auth frame TX",
++				wpa_printf(MSG_INFO, "RSN: Skip IBSS reinit since only %u usec from own Auth frame TX",
+ 					   (int) diff.usec);
+ 				goto skip_reinit;
+ 			}
+@@ -872,7 +872,7 @@ static void ibss_rsn_handle_auth_1_of_2(
+ 		 * here, but it's much more complicated than just deleting and
+ 		 * recreating the state machine
+ 		 */
+-		wpa_printf(MSG_DEBUG, "RSN: IBSS Reinitializing station "
++		wpa_printf(MSG_INFO, "RSN: IBSS Reinitializing station "
+ 			   MACSTR, MAC2STR(addr));
+ 
+ 		ibss_rsn_stop(ibss_rsn, addr);
+@@ -884,7 +884,7 @@ static void ibss_rsn_handle_auth_1_of_2(
+ 		if (!peer)
+ 			return;
+ 
+-		wpa_printf(MSG_DEBUG, "RSN: IBSS Auth started by peer " MACSTR,
++		wpa_printf(MSG_INFO, "RSN: IBSS Auth started by peer " MACSTR,
+ 			   MAC2STR(addr));
+ 	}
+ 
+@@ -930,7 +930,7 @@ void ibss_rsn_handle_auth(struct ibss_rs
+ 
+ 		/* authentication has been completed */
+ 		eloop_cancel_timeout(ibss_rsn_auth_timeout, peer, NULL);
+-		wpa_printf(MSG_DEBUG, "RSN: IBSS Auth completed with " MACSTR,
++		wpa_printf(MSG_INFO, "RSN: IBSS Auth completed with " MACSTR,
+ 			   MAC2STR(header->sa));
+ 		ibss_rsn_peer_authenticated(ibss_rsn, peer,
+ 					    IBSS_RSN_AUTH_BY_US);
