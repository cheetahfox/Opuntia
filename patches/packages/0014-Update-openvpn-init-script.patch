From 05010ff0061c5fb8826cde4c810cedc7c43b4704 Mon Sep 17 00:00:00 2001
From: syoder <syoder@imagestream.com>
Date: Fri, 28 Mar 2014 10:37:59 -0500
Subject: [PATCH] Update correct openvpn init script

---
 feeds/packages/net/openvpn/files/openvpn.init | 2 ++
 1 file changed, 2 insertions(+)

Index: build_dir/feeds/packages/net/openvpn/files/openvpn.init
===================================================================
--- build_dir.orig/feeds/packages/net/openvpn/files/openvpn.init
+++ build_dir/feeds/packages/net/openvpn/files/openvpn.init
@@ -4,7 +4,7 @@
 # This is free software, licensed under the GNU General Public License v2.
 # See /LICENSE for more information.
 
-START=90
+START=95
 STOP=10
 
 USE_PROCD=1
@@ -82,13 +82,40 @@ openvpn_add_instance() {
 		--config "$conf"
 	procd_set_param file "$dir/$conf"
 	procd_set_param term_timeout 15
-	procd_set_param respawn
-	procd_append_param respawn 3600
-	procd_append_param respawn 5
-	procd_append_param respawn -1
+	procd_set_param respawn 3600 10 0
 	procd_close_instance
 }
 
+openvpn_fixup_script_security() {
+	if [ "$#" -gt 1 ] ; then
+		config_set "$s" script_security "$1"
+	fi
+}
+
+openvpn_getkey() {
+        if [[ ${secret_phrase} =~ ^[:xdigit:]* ]]; then
+                secret_phrase=$(echo -n ${secret_phrase} | md5sum | awk '{print $1}')
+        fi
+
+        len=${#secret_phrase}
+        let i=0
+        while [ $((i)) -le $((keylen_chars/len)) ] ; do
+                echo -n $secret_phrase
+                let i=i+1
+        done
+}
+
+openvpn_fixup_passphrase() {
+	keylen_chars=$((2048/8*2))
+	line=$(openvpn_getkey)
+	echo '#'
+	echo '# 2048 bit OpenVPN static key'
+	echo '#'
+	echo '-----BEGIN OpenVPN Static key V1-----'
+	echo "$(echo $line | cut -b 1-${keylen_chars} | sed -e 's/.\{32\}/&\n/g')"
+	echo '-----END OpenVPN Static key V1-----'
+}
+
 start_instance() {
 	local s="$1"
 
@@ -111,6 +138,53 @@ start_instance() {
 	[ ! -d "/var/etc" ] && mkdir -p "/var/etc"
 	[ -f "/var/etc/openvpn-$s.conf" ] && rm "/var/etc/openvpn-$s.conf"
 
+	# Check to be sure we specify a device. If none specified, we use dynamic tun/tap -- Scott
+        config_get dev "$s" 'dev'
+        if [ "$dev" = "" ] ; then
+                config_get dev_type "$s" 'dev_type'
+                config_set "$s" dev $dev_type
+        fi
+
+	# Client mode is specified by an empty "mode" variable. We need the client bool flag set instead -- Scott
+        config_get mode "$s" 'mode'
+        if [ "$mode" = "" ] ; then
+                config_set "$s" client 1
+	else
+                config_set "$s" client 0
+ 	fi
+ 
+	# comp_lzo option is deprecated in 2.4 - change to compress
+        config_get comp_lzo "$s" 'comp_lzo'
+	if [ ! -z $comp_lzo ] ; then
+		config_unset "$s" comp_lzo
+		config_set "$s" compress "lzo"
+	fi
+
+	# Fixup script-security for OpenVPN version >= 2.4
+	config_get script_security "$s" 'script_security'
+	openvpn_fixup_script_security $script_security
+
+	# Generate the key from passphrase for older 4.2/4.4 router compatability
+	config_get secret_type "$s" 'secret_type'
+	if [ "$secret_type" = "passphrase" ] ; then
+		config_get secret_phrase "$s" 'secret_phrase'
+		config_get secret "$s" 'secret'
+		if [ -z "$secret" ] ; then
+			secret="/lib/uci/upload/cbid.openvpn.$s.secret"
+			config_set "$s" secret "$secret"
+		fi
+		if [ ! -f $secret ] ; then
+			mkdir -p $(dirname $secret)
+			openvpn_fixup_passphrase > $secret
+		fi
+	fi
+
+	# Fix mtu-disc error with IPv6  for OpenVPN version >= 2.4
+	config_get proto "$s" 'proto'
+	if [ "$proto" = "udp" ] ; then
+		config_set "$s" proto "udp4"
+	fi
+
 	append_bools "$s" $OPENVPN_BOOLS
 	append_params "$s" $OPENVPN_PARAMS
 	append_list "$s" $OPENVPN_LIST
