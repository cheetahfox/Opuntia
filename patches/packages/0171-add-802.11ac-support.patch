Index: build_dir/package/network/config/netifd/patches/002-initial-802.11ac-support.patch
===================================================================
--- /dev/null
+++ build_dir/package/network/config/netifd/patches/002-initial-802.11ac-support.patch
@@ -0,0 +1,19 @@
+Index: netifd-2019-04-15-666c14f9/scripts/netifd-wireless.sh
+===================================================================
+--- netifd-2019-04-15-666c14f9.orig/scripts/netifd-wireless.sh
++++ netifd-2019-04-15-666c14f9/scripts/netifd-wireless.sh
+@@ -65,12 +65,14 @@ _wdev_prepare_channel() {
+ 		json_get_vars htmode
+ 		case "$htmode" in
+ 			HT20|HT40+|HT40-);;
++			VHT20|VHT40|VHT80|VHT160);;
+ 			*) htmode= ;;
+ 		esac
+ 	}
+ 
+ 	case "$hwmode" in
+ 		a|b|g|ad) ;;
++		ac) hwmode=a ;;
+ 		*)
+ 			if [ "$channel" -gt 14 ]; then
+ 				hwmode=a
Index: build_dir/package/network/utils/iwinfo/patches/001-initial-802.11ac-support.patch
===================================================================
--- /dev/null
+++ build_dir/package/network/utils/iwinfo/patches/001-initial-802.11ac-support.patch
@@ -0,0 +1,90 @@
+--- a/include/iwinfo.h
++++ b/include/iwinfo.h
+@@ -87,8 +87,13 @@ extern const char *IWINFO_HTMODE_NAMES[I
+ struct iwinfo_rate_entry {
+ 	uint32_t rate;
+ 	int8_t mcs;
++	int8_t vht_mcs;
+ 	uint8_t is_40mhz:1;
++	uint8_t is_80mhz:1;
++	uint8_t is_80p80mhz:1;
++	uint8_t is_160mhz:1;
+ 	uint8_t is_short_gi:1;
++	uint8_t vht_nss;
+ 	uint8_t is_ht:1;
+ 	uint8_t is_vht:1;
+ 	uint8_t mhz;
+--- a/iwinfo_lua.c
++++ b/iwinfo_lua.c
+@@ -283,6 +283,24 @@ static void set_rateinfo(lua_State *L, s
+ 
+ 		lua_pushboolean(L, r->is_short_gi);
+ 		lua_setfield(L, -2, rx ? "rx_short_gi" : "tx_short_gi");
++
++		lua_pushnumber(L, r->vht_mcs);
++		lua_setfield(L, -2, rx ? "rx_vht_mcs" : "tx_vht_mcs");
++
++		lua_pushboolean(L, r->is_40mhz);
++		lua_setfield(L, -2, rx ? "rx_40mhz" : "tx_40mhz");
++
++		lua_pushboolean(L, r->is_80mhz);
++		lua_setfield(L, -2, rx ? "rx_80mhz" : "tx_80mhz");
++
++		lua_pushboolean(L, r->is_80p80mhz);
++		lua_setfield(L, -2, rx ? "rx_80p80mhz" : "tx_80p80mhz");
++
++		lua_pushboolean(L, r->is_160mhz);
++		lua_setfield(L, -2, rx ? "rx_160mhz" : "tx_160mhz");
++
++		lua_pushnumber(L, r->vht_nss);
++		lua_setfield(L, -2, rx ? "rx_vht_nss" : "tx_vht_nss");
+ 	}
+ }
+ 
+--- a/iwinfo_nl80211.c
++++ b/iwinfo_nl80211.c
+@@ -1637,9 +1637,13 @@ static void nl80211_parse_rateinfo(struc
+ 	{
+ 		re->is_vht = 1;
+ 		re->mcs = nla_get_u8(ri[NL80211_RATE_INFO_VHT_MCS]);
++		re->vht_mcs = nla_get_u8(ri[NL80211_RATE_INFO_VHT_MCS]);
+ 
+ 		if (ri[NL80211_RATE_INFO_VHT_NSS])
++		{
+ 			re->nss = nla_get_u8(ri[NL80211_RATE_INFO_VHT_NSS]);
++			re->vht_nss = nla_get_u8(ri[NL80211_RATE_INFO_VHT_NSS]);
++		}
+ 	}
+ 	else if (ri[NL80211_RATE_INFO_MCS])
+ 	{
+@@ -1665,6 +1669,9 @@ static void nl80211_parse_rateinfo(struc
+ 		re->is_short_gi = 1;
+ 
+ 	re->is_40mhz = (re->mhz == 40);
++	re->is_80mhz = (re->mhz == 80);
++	re->is_80p80mhz = (ri[NL80211_RATE_INFO_80P80_MHZ_WIDTH]);
++	re->is_160mhz = (ri[NL80211_RATE_INFO_160_MHZ_WIDTH]);
+ }
+ 
+ static int nl80211_get_assoclist_cb(struct nl_msg *msg, void *arg)
+@@ -1695,13 +1702,20 @@ static int nl80211_get_assoclist_cb(stru
+ 	static struct nla_policy rate_policy[NL80211_RATE_INFO_MAX + 1] = {
+ 		[NL80211_RATE_INFO_BITRATE]      = { .type = NLA_U16    },
+ 		[NL80211_RATE_INFO_MCS]          = { .type = NLA_U8     },
++		[NL80211_RATE_INFO_VHT_MCS]      = { .type = NLA_U8     },
+ 		[NL80211_RATE_INFO_40_MHZ_WIDTH] = { .type = NLA_FLAG   },
++		[NL80211_RATE_INFO_80_MHZ_WIDTH] = { .type = NLA_FLAG   },
++		[NL80211_RATE_INFO_80P80_MHZ_WIDTH] = { .type = NLA_FLAG   },
++		[NL80211_RATE_INFO_160_MHZ_WIDTH] = { .type = NLA_FLAG   },
+ 		[NL80211_RATE_INFO_SHORT_GI]     = { .type = NLA_FLAG   },
++		[NL80211_RATE_INFO_VHT_NSS]      = { .type = NLA_U8     },
+ 	};
+ 
+ 	/* advance to end of array */
+ 	e += arr->count;
+ 	memset(e, 0, sizeof(*e));
++	e->rx_rate.mcs = e->rx_rate.vht_mcs = -1;
++	e->tx_rate.mcs = e->tx_rate.vht_mcs = -1;
+ 
+ 	if (attr[NL80211_ATTR_MAC])
+ 		memcpy(e->mac, nla_data(attr[NL80211_ATTR_MAC]), 6);
