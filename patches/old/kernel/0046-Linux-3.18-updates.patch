--- /dev/null
+++ b/target/linux/generic/patches-3.18/1001-scott-bridge-pass-mac-all0s.patch
@@ -0,0 +1,11 @@
+--- a/net/bridge/br_input.c
++++ b/net/bridge/br_input.c
+@@ -168,7 +168,7 @@ rx_handler_result_t br_handle_frame(stru
+ 	if (unlikely(skb->pkt_type == PACKET_LOOPBACK))
+ 		return RX_HANDLER_PASS;
+ 
+-	if (!is_valid_ether_addr(eth_hdr(skb)->h_source))
++	if (!is_valid_ether_addr(eth_hdr(skb)->h_source) && !is_zero_ether_addr(eth_hdr(skb)->h_source))
+ 		goto drop;
+ 
+ 	skb = skb_share_check(skb, GFP_ATOMIC);
--- /dev/null
+++ b/target/linux/generic/patches-3.18/1001-scott-uc20.patch
@@ -0,0 +1,32 @@
+--- a/drivers/usb/serial/qcserial.c
++++ b/drivers/usb/serial/qcserial.c
+@@ -134,6 +134,7 @@ static const struct usb_device_id id_tab
+ 	{USB_DEVICE(0x12D1, 0x14F0)},	/* Sony Gobi 3000 QDL */
+ 	{USB_DEVICE(0x12D1, 0x14F1)},	/* Sony Gobi 3000 Composite */
+ 	{USB_DEVICE(0x0AF0, 0x8120)},	/* Option GTM681W */
++	{USB_DEVICE(0x05c6, 0x9003)},	/* Quectel UC20 */
+ 
+ 	/* non-Gobi Sierra Wireless devices */
+ 	{DEVICE_SWI(0x0f3d, 0x68a2)},	/* Sierra Wireless MC7700 */
+@@ -235,8 +236,9 @@ static int qcprobe(struct usb_serial *se
+ 		 * 1: DM/DIAG (use libqcdm from ModemManager for communication)
+ 		 * 2: AT-capable modem port
+ 		 * 3: NMEA
++		 * 4: NDIS (UC20)
+ 		 */
+-		if (nintf < 3 || nintf > 4) {
++		if (nintf < 3 || nintf > 5) {
+ 			dev_err(dev, "unknown number of interfaces: %d\n", nintf);
+ 			altsetting = -1;
+ 			goto done;
+@@ -261,6 +263,10 @@ static int qcprobe(struct usb_serial *se
+ 			 */
+ 			dev_dbg(dev, "Gobi 2K+ NMEA GPS interface found\n");
+ 			break;
++		case 4:
++			/* Don't claim the NDIS interface */
++			altsetting = -1;
++			break;
+ 		}
+ 		break;
+ 	case QCSERIAL_SWI:
--- /dev/null
+++ b/target/linux/generic/patches-3.18/1002-scott-gre-keepalive.patch
@@ -0,0 +1,206 @@
+--- a/include/uapi/linux/if_tunnel.h
++++ b/include/uapi/linux/if_tunnel.h
+@@ -35,6 +35,10 @@ struct ip_tunnel_parm {
+ 	__be32			i_key;
+ 	__be32			o_key;
+ 	struct iphdr		iph;
++        struct timer_list               *timer;
++        int             ka_interval;
++        int             ka_retries;
++        int             ka_cur_retries;
+ };
+ 
+ enum {
+--- a/net/ipv4/ip_gre.c
++++ b/net/ipv4/ip_gre.c
+@@ -218,6 +218,11 @@ static int ipgre_rcv(struct sk_buff *skb
+ 
+ 	if (tunnel) {
+ 		skb_pop_mac_header(skb);
++		if (tpi->proto == 0) {
++			tunnel->parms.ka_cur_retries = tunnel->parms.ka_retries;
++			if (!netif_carrier_ok(tunnel->dev))
++				netif_carrier_on(tunnel->dev);
++		}
+ 		ip_tunnel_rcv(tunnel, skb, tpi, log_ecn_error);
+ 		return PACKET_RCVD;
+ 	}
+--- a/net/ipv4/ip_tunnel.c
++++ b/net/ipv4/ip_tunnel.c
+@@ -64,6 +64,8 @@
+ #include <net/ip6_route.h>
+ #endif
+ 
++static void ipgre_keepalive_timer(unsigned long data);
++
+ static unsigned int ip_tunnel_hash(__be32 key, __be32 remote)
+ {
+ 	return hash_32((__force u32)key ^ (__force u32)remote,
+@@ -799,6 +801,8 @@ tx_error:
+ }
+ EXPORT_SYMBOL_GPL(ip_tunnel_xmit);
+ 
++void ip_gre_keepalive_setup(struct ip_tunnel *t, struct net_device *dev, int on);
++
+ static void ip_tunnel_update(struct ip_tunnel_net *itn,
+ 			     struct ip_tunnel *t,
+ 			     struct net_device *dev,
+@@ -829,9 +833,138 @@ static void ip_tunnel_update(struct ip_t
+ 			dev->mtu = mtu;
+ 	}
+ 	ip_tunnel_dst_reset_all(t);
++	t->parms.ka_interval = p->ka_interval;
++	t->parms.ka_retries = p->ka_retries;
++
++	if (!t->parms.timer && t->parms.ka_interval > 0 && t->parms.ka_retries > 0) {
++		ip_gre_keepalive_setup(t, t->dev, 1);
++	} else if (t->parms.timer && (t->parms.ka_interval <= 0 || t->parms.ka_retries <= 0)) {
++		ip_gre_keepalive_setup(t, t->dev, 0);
++	}
++
+ 	netdev_state_change(dev);
+ }
+ 
++struct ipgre_keepalive {
++	// 3.10 kernel drops packets with less than 8 bytes of GRE payload for
++	// some reason - maybe less than hlen? Scott
++	u32 ts;
++	u8 pad[4];
++};
++
++static void ipgre_keepalive_xmit(struct net_device *dev)
++{
++	struct ip_tunnel *tunnel = netdev_priv(dev);
++	struct iphdr *iph = &tunnel->parms.iph;
++	int hlen = sizeof(struct iphdr) + tunnel->hlen;
++	struct ipgre_keepalive *ipk;
++	// 2 IP headers and 2 GRE headers, tunnel->hlen = IP header + GRE hreader
++	struct sk_buff *skb = dev_alloc_skb((hlen * 2) + sizeof(*ipk));
++	struct iphdr *inner_iph;
++
++	skb_reserve(skb, hlen);
++	skb->dev = dev;
++	skb->pkt_type = PACKET_OUTGOING;
++	skb->ip_summed = CHECKSUM_NONE;
++	skb->protocol = htons(ETH_P_IP);
++
++	skb_reset_network_header(skb);
++	skb_set_transport_header(skb, sizeof(struct iphdr));
++
++	inner_iph = (struct iphdr*) skb_put(skb, hlen + sizeof(*ipk));
++	inner_iph->saddr = iph->daddr;
++	inner_iph->daddr = iph->saddr;
++	inner_iph->protocol = IPPROTO_GRE;
++
++	inner_iph->version	=	4;
++	inner_iph->ihl		=	sizeof(struct iphdr) >> 2;
++	inner_iph->frag_off	=	0;
++	inner_iph->ttl		=	255;
++	inner_iph->tos		=	0;
++	inner_iph->tot_len = htons(skb->len);
++
++	ipk = (struct ipgre_keepalive*)(((u8*)inner_iph) + hlen);
++	ipk->ts = jiffies;
++	memset(ipk->pad, 0, sizeof(ipk->pad));
++
++	((__be16*)(inner_iph+1))[0] = tunnel->parms.o_flags;
++	((__be16*)(inner_iph+1))[1] = 0;
++
++	if (tunnel->parms.o_flags&(GRE_KEY|GRE_CSUM|GRE_SEQ)) {
++		__be32 *ptr = (__be32*)(((u8*)inner_iph) + hlen - 4);
++
++		if (tunnel->parms.o_flags&GRE_SEQ) {
++			++tunnel->o_seqno;
++			*ptr = htonl(tunnel->o_seqno);
++			ptr--;
++		}
++		if (tunnel->parms.o_flags&GRE_KEY) {
++			*ptr = tunnel->parms.o_key;
++			ptr--;
++		}
++		if (tunnel->parms.o_flags&GRE_CSUM) {
++			*ptr = 0;
++			*(__sum16*)ptr = ip_compute_csum((void*)(inner_iph+1), skb->len - sizeof(struct iphdr));
++		}
++	}
++
++	inner_iph->check = 0;
++	inner_iph->check = ip_fast_csum((unsigned char *)inner_iph, inner_iph->ihl);
++
++	dev->netdev_ops->ndo_start_xmit(skb, dev);
++}
++
++static void ipgre_keepalive_schedule(struct ip_tunnel *tunnel)
++{
++	struct ip_tunnel_parm *parms = &tunnel->parms;
++
++	parms->timer->function = ipgre_keepalive_timer;
++	/* First keepalive sent in 1 jiffie */
++	if (parms->timer->data == 0)
++		parms->timer->expires = jiffies + 1;
++	else
++		parms->timer->expires = jiffies + tunnel->parms.ka_interval * HZ;
++	parms->timer->data = (unsigned long) tunnel;
++	add_timer(parms->timer);
++}
++
++static void ipgre_keepalive_timer(unsigned long data)
++{
++	struct ip_tunnel *tunnel = (struct ip_tunnel*) data;
++	
++	if (tunnel->parms.ka_cur_retries > 0 && --tunnel->parms.ka_cur_retries == 0) {
++		netif_carrier_off(tunnel->dev);
++	}
++
++	ipgre_keepalive_xmit(tunnel->dev);
++	ipgre_keepalive_schedule(tunnel);
++}
++
++void ip_gre_keepalive_setup(struct ip_tunnel *t, struct net_device *dev, int on)
++{
++	struct in_device *in_dev = __in_dev_get_rtnl(dev);
++	if (on) {
++		if (!t->parms.timer)
++			t->parms.timer = kmalloc(sizeof(struct timer_list), GFP_ATOMIC);
++		init_timer(t->parms.timer);
++		t->parms.timer->data = 0;
++		netif_carrier_off(dev);
++		if (in_dev)
++			IPV4_DEVCONF(in_dev->cnf, ACCEPT_LOCAL) = 1;
++		t->parms.ka_cur_retries = t->parms.ka_retries;
++		ipgre_keepalive_schedule(t);
++	}
++	else {
++		del_timer(t->parms.timer);
++		kfree(t->parms.timer);
++		t->parms.timer = NULL;
++		if (!netif_carrier_ok(dev))
++			netif_carrier_on(dev);
++		if (in_dev)
++			IPV4_DEVCONF(in_dev->cnf, ACCEPT_LOCAL) = 0;
++	}
++}
++
+ int ip_tunnel_ioctl(struct net_device *dev, struct ip_tunnel_parm *p, int cmd)
+ {
+ 	int err = 0;
+@@ -868,6 +1001,7 @@ int ip_tunnel_ioctl(struct net_device *d
+ 
+ 		if (cmd == SIOCADDTUNNEL) {
+ 			if (!t) {
++				p->timer = NULL;
+ 				t = ip_tunnel_create(net, itn, p);
+ 				err = PTR_ERR_OR_ZERO(t);
+ 				break;
+@@ -921,6 +1055,11 @@ int ip_tunnel_ioctl(struct net_device *d
+ 			if (t == netdev_priv(itn->fb_tunnel_dev))
+ 				goto done;
+ 			dev = t->dev;
++			if (t && t->parms.timer) {
++				del_timer(t->parms.timer);
++				kfree(t->parms.timer);
++				t->parms.timer = NULL;
++			}
+ 		}
+ 		unregister_netdevice(dev);
+ 		err = 0;
--- /dev/null
+++ b/target/linux/generic/patches-3.18/1004-scott-reuse-ifindex.patch
@@ -0,0 +1,44 @@
+--- a/net/core/dev.c
++++ b/net/core/dev.c
+@@ -230,6 +230,8 @@ static void list_netdevice(struct net_de
+  */
+ static void unlist_netdevice(struct net_device *dev)
+ {
++	struct net *net = dev_net(dev);
++
+ 	ASSERT_RTNL();
+ 
+ 	/* Unlink dev from the device chain */
+@@ -240,6 +242,9 @@ static void unlist_netdevice(struct net_
+ 	write_unlock_bh(&dev_base_lock);
+ 
+ 	dev_base_seq_inc(dev_net(dev));
++
++	if (!net->ifindex || dev->ifindex < net->ifindex)
++		net->ifindex = dev->ifindex;
+ }
+ 
+ /*
+@@ -5446,10 +5451,10 @@ static int dev_new_index(struct net *net
+ {
+ 	int ifindex = net->ifindex;
+ 	for (;;) {
+-		if (++ifindex <= 0)
+-			ifindex = 1;
+ 		if (!__dev_get_by_index(net, ifindex))
+ 			return net->ifindex = ifindex;
++		if (++ifindex <= 0)
++			ifindex = 1;
+ 	}
+ }
+ 
+--- a/net/core/net_namespace.c
++++ b/net/core/net_namespace.c
+@@ -158,6 +158,7 @@ static __net_init int setup_net(struct n
+ 	atomic_set(&net->passive, 1);
+ 	net->dev_base_seq = 1;
+ 	net->user_ns = user_ns;
++	net->ifindex = 1;
+ 
+ #ifdef NETNS_REFCNT_DEBUG
+ 	atomic_set(&net->use_count, 0);
--- /dev/null
+++ b/target/linux/generic/patches-3.18/1005-scott-usb-serial-noecho.patch
@@ -0,0 +1,23 @@
+--- a/drivers/usb/serial/qcserial.c
++++ b/drivers/usb/serial/qcserial.c
+@@ -162,6 +162,12 @@ static const struct usb_device_id id_tab
+ };
+ MODULE_DEVICE_TABLE(usb, id_table);
+ 
++static void qc_init_termios(struct tty_struct *tty)
++{
++        tty->termios.c_lflag &= ~ECHO;
++        tty_encode_baud_rate(tty, 115200, 115200);
++}
++
+ static int qcprobe(struct usb_serial *serial, const struct usb_device_id *id)
+ {
+ 	struct usb_host_interface *intf = serial->interface->cur_altsetting;
+@@ -358,6 +364,7 @@ static struct usb_serial_driver qcdevice
+ 	.suspend	     = usb_wwan_suspend,
+ 	.resume		     = usb_wwan_resume,
+ #endif
++	.init_termios        = qc_init_termios,
+ };
+ 
+ static struct usb_serial_driver * const serial_drivers[] = {
