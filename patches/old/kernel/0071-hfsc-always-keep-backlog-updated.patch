--- /dev/null
+++ b/target/linux/generic/patches-4.4/999-scott-hsfc-always-keep-backlog-updated.patch
@@ -0,0 +1,49 @@
+--- a/net/sched/sch_hfsc.c
++++ b/net/sched/sch_hfsc.c
+@@ -1529,6 +1529,7 @@ hfsc_reset_qdisc(struct Qdisc *sch)
+ 	q->eligible = RB_ROOT;
+ 	INIT_LIST_HEAD(&q->droplist);
+ 	qdisc_watchdog_cancel(&q->watchdog);
++	sch->qstats.backlog = 0;
+ 	sch->q.qlen = 0;
+ }
+ 
+@@ -1559,14 +1560,6 @@ hfsc_dump_qdisc(struct Qdisc *sch, struc
+ 	struct hfsc_sched *q = qdisc_priv(sch);
+ 	unsigned char *b = skb_tail_pointer(skb);
+ 	struct tc_hfsc_qopt qopt;
+-	struct hfsc_class *cl;
+-	unsigned int i;
+-
+-	sch->qstats.backlog = 0;
+-	for (i = 0; i < q->clhash.hashsize; i++) {
+-		hlist_for_each_entry(cl, &q->clhash.hash[i], cl_common.hnode)
+-			sch->qstats.backlog += cl->qdisc->qstats.backlog;
+-	}
+ 
+ 	qopt.defcls = q->defcls;
+ 	if (nla_put(skb, TCA_OPTIONS, sizeof(qopt), &qopt))
+@@ -1604,6 +1597,7 @@ hfsc_enqueue(struct sk_buff *skb, struct
+ 	if (cl->qdisc->q.qlen == 1)
+ 		set_active(cl, qdisc_pkt_len(skb));
+ 
++	qdisc_qstats_backlog_inc(sch, skb);
+ 	sch->q.qlen++;
+ 
+ 	return NET_XMIT_SUCCESS;
+@@ -1672,6 +1666,7 @@ hfsc_dequeue(struct Qdisc *sch)
+ 
+ 	qdisc_unthrottled(sch);
+ 	qdisc_bstats_update(sch, skb);
++	qdisc_qstats_backlog_dec(sch, skb);
+ 	sch->q.qlen--;
+ 
+ 	return skb;
+@@ -1695,6 +1690,7 @@ hfsc_drop(struct Qdisc *sch)
+ 			}
+ 			cl->qstats.drops++;
+ 			qdisc_qstats_drop(sch);
++			sch->qstats.backlog -= len;
+ 			sch->q.qlen--;
+ 			return len;
+ 		}
