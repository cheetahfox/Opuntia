--- /dev/null
+++ b/target/linux/generic/patches-3.14/999-scott-fix-layer7-panics.patch
@@ -0,0 +1,20 @@
+--- a/net/netfilter/xt_layer7.c
++++ b/net/netfilter/xt_layer7.c
+@@ -69,13 +69,15 @@ static int total_acct_packets(struct nf_
+ 	BUG_ON(ct == NULL);
+ 	return (ct->counters[IP_CT_DIR_ORIGINAL].packets + ct->counters[IP_CT_DIR_REPLY].packets);
+ #else
+-	struct nf_conn_counter *acct;
++        const struct nf_conn_acct *acct;
++        const struct nf_conn_counter *counters;
+ 
+ 	BUG_ON(ct == NULL);
+ 	acct = nf_conn_acct_find(ct);
+ 	if (!acct)
+ 		return 0;
+-	return (atomic64_read(&acct[IP_CT_DIR_ORIGINAL].packets) + atomic64_read(&acct[IP_CT_DIR_REPLY].packets));
++        counters = acct->counter;
++	return (atomic64_read(&counters[IP_CT_DIR_ORIGINAL].packets) + atomic64_read(&counters[IP_CT_DIR_REPLY].packets));
+ #endif
+ }
+ 
--- /dev/null
+++ b/target/linux/generic/patches-3.14/604-netfilter_layer7_experimental_fix.patch
@@ -0,0 +1,10 @@
+--- a/net/netfilter/Kconfig.20140512	2014-05-12 22:05:18.077534804 -0500
++++ b/net/netfilter/Kconfig	2014-05-12 22:05:48.037534630 -0500
+@@ -1011,7 +1011,6 @@ config NETFILTER_XT_MATCH_IPVS
+ 
+ config NETFILTER_XT_MATCH_LAYER7
+ 	tristate '"layer7" match support'
+-	depends on EXPERIMENTAL
+ 	depends on NETFILTER_XTABLES
+ 	depends on NETFILTER_ADVANCED
+ 	depends on NF_CONNTRACK
--- /dev/null
+++ b/target/linux/generic/patches-3.14/633-netfilter_layer7_procfs_fix.patch
@@ -0,0 +1,55 @@
+--- a/net/netfilter/xt_layer7.c
++++ b/net/netfilter/xt_layer7.c
+@@ -364,8 +364,8 @@
+ }
+ 
+ /* write out num_packets to userland. */
+-static int layer7_read_proc(char* page, char ** start, off_t off, int count,
+-                            int* eof, void * data)
++static ssize_t layer7_read_proc(struct file *filp, char __user *page,
++                            size_t count, loff_t *data)
+ {
+ 	if(num_packets > 99 && net_ratelimit())
+ 		printk(KERN_ERR "layer7: NOT REACHED. num_packets too big\n");
+@@ -375,14 +375,12 @@
+ 	page[2] = '\n';
+ 	page[3] = '\0';
+ 
+-	*eof=1;
+-
+ 	return 3;
+ }
+ 
+ /* Read in num_packets from userland */
+-static int layer7_write_proc(struct file* file, const char* buffer,
+-                             unsigned long count, void *data)
++static ssize_t layer7_write_proc(struct file *file, const char __user *buffer,
++                             size_t count, loff_t *data)
+ {
+ 	char * foo = kmalloc(count, GFP_ATOMIC);
+ 
+@@ -661,12 +659,20 @@
+ }
+ 
+ /* register the proc file */
+-static void layer7_init_proc(void)
++static const struct file_operations layer7_fops = {
++       .owner  = THIS_MODULE,
++       .read   = layer7_read_proc,
++       .write  = layer7_write_proc,
++};
++
++static int layer7_init_proc(void)
+ {
+ 	struct proc_dir_entry* entry;
+-	entry = create_proc_entry("layer7_numpackets", 0644, init_net.proc_net);
+-	entry->read_proc = layer7_read_proc;
+-	entry->write_proc = layer7_write_proc;
++        entry = proc_create("layer7_numpackets", 0644, init_net.proc_net, &layer7_fops);
++        if (entry == NULL) {
++                return -ENOMEM;
++        }
++        return 0;
+ }
+ 
+ static int __init xt_layer7_init(void)
