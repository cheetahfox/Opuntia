--- /dev/null
+++ b/package/kernel/ath10k-ct/patches/1010-scott-ath10k-ct-add-coverage-setting.patch
@@ -0,0 +1,647 @@
+--- a/ath10k/core.c
++++ b/ath10k/core.c
+@@ -74,6 +74,7 @@ static const struct ath10k_hw_params ath
+ 			.board_size = QCA988X_BOARD_DATA_SZ,
+ 			.board_ext_size = QCA988X_BOARD_EXT_DATA_SZ,
+ 		},
++		.hw_ops = &qca988x_ops,
+ 	},
+ 	{
+ 		.id = QCA9887_HW_1_0_VERSION,
+@@ -93,6 +94,7 @@ static const struct ath10k_hw_params ath
+ 			.board_size = QCA9887_BOARD_DATA_SZ,
+ 			.board_ext_size = QCA9887_BOARD_EXT_DATA_SZ,
+ 		},
++		.hw_ops = &qca988x_ops,
+ 	},
+ 	{
+ 		.id = QCA6174_HW_2_1_VERSION,
+@@ -110,6 +112,7 @@ static const struct ath10k_hw_params ath
+ 			.board_size = QCA6174_BOARD_DATA_SZ,
+ 			.board_ext_size = QCA6174_BOARD_EXT_DATA_SZ,
+ 		},
++		.hw_ops = &qca988x_ops,
+ 	},
+ 	{
+ 		.id = QCA6174_HW_2_1_VERSION,
+@@ -128,6 +131,7 @@ static const struct ath10k_hw_params ath
+ 			.board_size = QCA6174_BOARD_DATA_SZ,
+ 			.board_ext_size = QCA6174_BOARD_EXT_DATA_SZ,
+ 		},
++		.hw_ops = &qca988x_ops,
+ 	},
+ 	{
+ 		.id = QCA6174_HW_3_0_VERSION,
+@@ -146,6 +150,7 @@ static const struct ath10k_hw_params ath
+ 			.board_size = QCA6174_BOARD_DATA_SZ,
+ 			.board_ext_size = QCA6174_BOARD_EXT_DATA_SZ,
+ 		},
++		.hw_ops = &qca988x_ops,
+ 	},
+ 	{
+ 		.id = QCA6174_HW_3_2_VERSION,
+@@ -165,6 +170,7 @@ static const struct ath10k_hw_params ath
+ 			.board_size = QCA6174_BOARD_DATA_SZ,
+ 			.board_ext_size = QCA6174_BOARD_EXT_DATA_SZ,
+ 		},
++		.hw_ops = &qca988x_ops,
+ 	},
+ 	{
+ 		.id = QCA99X0_HW_2_0_DEV_VERSION,
+@@ -187,6 +193,7 @@ static const struct ath10k_hw_params ath
+ 			.board_size = QCA99X0_BOARD_DATA_SZ,
+ 			.board_ext_size = QCA99X0_BOARD_EXT_DATA_SZ,
+ 		},
++                .hw_ops = &qca99x0_ops,
+ 	},
+ 	{
+ 		.id = QCA9984_HW_1_0_DEV_VERSION,
+@@ -209,6 +216,7 @@ static const struct ath10k_hw_params ath
+ 			.board_size = QCA99X0_BOARD_DATA_SZ,
+ 			.board_ext_size = QCA99X0_BOARD_EXT_DATA_SZ,
+ 		},
++                .hw_ops = &qca99x0_ops,
+ 	},
+ 	{
+ 		.id = QCA9888_HW_2_0_DEV_VERSION,
+@@ -231,6 +239,7 @@ static const struct ath10k_hw_params ath
+ 			.board_size = QCA99X0_BOARD_DATA_SZ,
+ 			.board_ext_size = QCA99X0_BOARD_EXT_DATA_SZ,
+ 		},
++                .hw_ops = &qca99x0_ops,
+ 	},
+ 	{
+ 		.id = QCA9377_HW_1_0_DEV_VERSION,
+@@ -248,6 +257,7 @@ static const struct ath10k_hw_params ath
+ 			.board_size = QCA9377_BOARD_DATA_SZ,
+ 			.board_ext_size = QCA9377_BOARD_EXT_DATA_SZ,
+ 		},
++		.hw_ops = &qca988x_ops,
+ 	},
+ 	{
+ 		.id = QCA9377_HW_1_1_DEV_VERSION,
+@@ -265,6 +275,7 @@ static const struct ath10k_hw_params ath
+ 			.board_size = QCA9377_BOARD_DATA_SZ,
+ 			.board_ext_size = QCA9377_BOARD_EXT_DATA_SZ,
+ 		},
++		.hw_ops = &qca988x_ops,
+ 	},
+ 	{
+ 		.id = QCA4019_HW_1_0_DEV_VERSION,
+@@ -288,6 +299,7 @@ static const struct ath10k_hw_params ath
+ 			.board_size = QCA4019_BOARD_DATA_SZ,
+ 			.board_ext_size = QCA4019_BOARD_EXT_DATA_SZ,
+ 		},
++		.hw_ops = &qca988x_ops,
+ 	},
+ };
+ 
+@@ -1979,6 +1991,15 @@ static void ath10k_core_restart(struct w
+ 	mutex_unlock(&ar->conf_mutex);
+ }
+ 
++static void ath10k_core_set_coverage_class_work(struct work_struct *work)
++{
++	struct ath10k *ar = container_of(work, struct ath10k,
++					 set_coverage_class_work);
++
++	if (ar->hw_params.hw_ops->set_coverage_class)
++		ar->hw_params.hw_ops->set_coverage_class(ar, -1);
++}
++
+ static int ath10k_core_init_firmware_features(struct ath10k *ar)
+ {
+ 	struct ath10k_fw_file *fw_file = &ar->normal_mode_fw.fw_file;
+@@ -2889,6 +2910,9 @@ struct ath10k *ath10k_core_create(size_t
+ 	INIT_WORK(&ar->register_work, ath10k_core_register_work);
+ 	INIT_WORK(&ar->restart_work, ath10k_core_restart);
+ 
++	INIT_WORK(&ar->set_coverage_class_work,
++		  ath10k_core_set_coverage_class_work);
++
+ 	init_dummy_netdev(&ar->napi_dev);
+ 	strcpy(ar->napi_dev.name, "ath10_napi");
+ 
+--- a/ath10k/core.h
++++ b/ath10k/core.h
+@@ -932,6 +932,7 @@ struct ath10k {
+ 			size_t board_size;
+ 			size_t board_ext_size;
+ 		} fw;
++		const struct ath10k_hw_ops *hw_ops;
+ 	} hw_params;
+ 
+ 	/* contains the firmware images used with ATH10K_FIRMWARE_MODE_NORMAL */
+@@ -1192,6 +1193,19 @@ struct ath10k {
+ 	struct net_device napi_dev;
+ 	struct napi_struct napi;
+ 
++        struct work_struct set_coverage_class_work;
++        /* protected by conf_mutex */
++        struct {
++                /* writing also protected by data_lock */
++                s16 coverage_class;
++		u16 pad;
++                u32 reg_phyclk;
++                u32 reg_slottime_conf;
++                u32 reg_slottime_orig;
++                u32 reg_ack_cts_timeout_conf;
++                u32 reg_ack_cts_timeout_orig;
++        } fw_coverage;
++
+ 	/* must be last */
+ 	u8 drv_priv[0] __aligned(sizeof(void *));
+ };
+--- a/ath10k/hw.c
++++ b/ath10k/hw.c
+@@ -17,6 +17,8 @@
+ #include <linux/types.h>
+ #include "core.h"
+ #include "hw.h"
++#include "hif.h"
++#include "wmi-ops.h"
+ 
+ const struct ath10k_hw_regs qca988x_regs = {
+ 	.rtc_soc_base_address		= 0x00004000,
+@@ -200,3 +202,162 @@ void ath10k_hw_fill_survey_time(struct a
+ 	survey->time = CCNT_TO_MSEC(ar, cc);
+ 	survey->time_busy = CCNT_TO_MSEC(ar, rcc);
+ }
++
++/* The firmware does not support setting the coverage class. Instead this
++ * function monitors and modifies the corresponding MAC registers.
++ */
++static void ath10k_hw_qca988x_set_coverage_class(struct ath10k *ar,
++						 s16 value)
++{
++	u32 slottime_reg, t_slottime_reg;
++	u32 slottime;
++	u32 timeout_reg, t_timeout_reg;
++	u32 ack_timeout;
++	u32 cts_timeout;
++	u32 phyclk_reg;
++	u32 phyclk;
++	u64 fw_dbglog_mask;
++	u32 fw_dbglog_level;
++
++	mutex_lock(&ar->conf_mutex);
++
++	/* Only modify registers if the core is started. */
++	if ((ar->state != ATH10K_STATE_ON) &&
++	    (ar->state != ATH10K_STATE_RESTARTED))
++		goto store_regs;
++
++	/* Retrieve the current values of the two registers that need to be
++	 * adjusted.
++	 */
++	slottime_reg = ath10k_hif_read32(ar, WLAN_MAC_BASE_ADDRESS +
++					     WAVE1_PCU_GBL_IFS_SLOT);
++	timeout_reg = ath10k_hif_read32(ar, WLAN_MAC_BASE_ADDRESS +
++					    WAVE1_PCU_ACK_CTS_TIMEOUT);
++	phyclk_reg = ath10k_hif_read32(ar, WLAN_MAC_BASE_ADDRESS +
++					   WAVE1_PHYCLK);
++	phyclk = MS(phyclk_reg, WAVE1_PHYCLK_USEC) + 1;
++
++	if (value < 0)
++		value = ar->fw_coverage.coverage_class;
++
++	/* Break out if the coverage class and registers have the expected
++	 * value.
++	 */
++	if (value == ar->fw_coverage.coverage_class &&
++	    slottime_reg == ar->fw_coverage.reg_slottime_conf &&
++	    timeout_reg == ar->fw_coverage.reg_ack_cts_timeout_conf &&
++	    phyclk_reg == ar->fw_coverage.reg_phyclk)
++		goto unlock;
++
++	/* Store new initial register values from the firmware. */
++	if (slottime_reg != ar->fw_coverage.reg_slottime_conf)
++		ar->fw_coverage.reg_slottime_orig = slottime_reg;
++	if (timeout_reg != ar->fw_coverage.reg_ack_cts_timeout_conf)
++		ar->fw_coverage.reg_ack_cts_timeout_orig = timeout_reg;
++	ar->fw_coverage.reg_phyclk = phyclk_reg;
++
++	/* Calculat new value based on the (original) firmware calculation. */
++	slottime_reg = ar->fw_coverage.reg_slottime_orig;
++	timeout_reg = ar->fw_coverage.reg_ack_cts_timeout_orig;
++
++	/* Do some sanity checks on the slottime register. */
++	if (slottime_reg % phyclk) {
++		ath10k_warn(ar,
++			    "failed to set coverage class: expected integer microsecond value in register\n");
++
++		goto store_regs;
++	}
++
++	slottime = MS(slottime_reg, WAVE1_PCU_GBL_IFS_SLOT);
++	slottime = slottime / phyclk;
++	if (slottime != 9 && slottime != 20) {
++		ath10k_warn(ar,
++			    "failed to set coverage class: expected slot time of 9 or 20us in HW register. It is %uus.\n",
++			    slottime);
++
++		goto store_regs;
++	}
++
++	/* Recalculate the register values by adding the additional propagation
++	 * delay (3us per coverage class).
++	 */
++
++	slottime = MS(slottime_reg, WAVE1_PCU_GBL_IFS_SLOT);
++	slottime += value * 3 * phyclk;
++	slottime = min_t(u32, slottime, WAVE1_PCU_GBL_IFS_SLOT_MAX);
++	slottime = SM(slottime, WAVE1_PCU_GBL_IFS_SLOT);
++	slottime_reg = (slottime_reg & ~WAVE1_PCU_GBL_IFS_SLOT_MASK) | slottime;
++
++	/* Update ack timeout (lower halfword). */
++	ack_timeout = MS(timeout_reg, WAVE1_PCU_ACK_CTS_TIMEOUT_ACK);
++	ack_timeout += 3 * value * phyclk;
++	ack_timeout = min_t(u32, ack_timeout, WAVE1_PCU_ACK_CTS_TIMEOUT_MAX);
++	ack_timeout = SM(ack_timeout, WAVE1_PCU_ACK_CTS_TIMEOUT_ACK);
++
++	/* Update cts timeout (upper halfword). */
++	cts_timeout = MS(timeout_reg, WAVE1_PCU_ACK_CTS_TIMEOUT_CTS);
++	cts_timeout += 3 * value * phyclk;
++	cts_timeout = min_t(u32, cts_timeout, WAVE1_PCU_ACK_CTS_TIMEOUT_MAX);
++	cts_timeout = SM(cts_timeout, WAVE1_PCU_ACK_CTS_TIMEOUT_CTS);
++
++	timeout_reg = ack_timeout | cts_timeout;
++
++	printk("Changing coverage class to %d\n", value);
++	ath10k_hif_write32(ar,
++			   WLAN_MAC_BASE_ADDRESS + WAVE1_PCU_GBL_IFS_SLOT,
++			   slottime_reg);
++	ath10k_hif_write32(ar,
++			   WLAN_MAC_BASE_ADDRESS + WAVE1_PCU_ACK_CTS_TIMEOUT,
++			   timeout_reg);
++
++	t_slottime_reg = ath10k_hif_read32(ar, WLAN_MAC_BASE_ADDRESS +
++					     WAVE1_PCU_GBL_IFS_SLOT);
++	t_timeout_reg = ath10k_hif_read32(ar, WLAN_MAC_BASE_ADDRESS +
++					    WAVE1_PCU_ACK_CTS_TIMEOUT);
++	if (t_slottime_reg != slottime_reg)
++		printk("Slottime register is not correct! 0x%x but s/b 0x%x\n", t_slottime_reg, slottime_reg);
++	else
++		printk("Slottime register is correct at 0x%x\n", t_slottime_reg);
++	if (t_timeout_reg != timeout_reg)
++		printk("Timeout register is not correct! 0x%x but s/b 0x%x\n", t_timeout_reg, timeout_reg);
++	else
++		printk("Timeout register is correct at 0x%x\n", t_timeout_reg);
++
++#if 0 /* Shouldn't need this -- Scott */
++	/* Ensure we have a debug level of WARN set for the case that the
++	 * coverage class is larger than 0. This is important as we need to
++	 * set the registers again if the firmware does an internal reset and
++	 * this way we will be notified of the event.
++	 */
++	fw_dbglog_mask = ath10k_debug_get_fw_dbglog_mask(ar);
++	fw_dbglog_level = ath10k_debug_get_fw_dbglog_level(ar);
++
++	if (value > 0) {
++		if (fw_dbglog_level > ATH10K_DBGLOG_LEVEL_WARN)
++			fw_dbglog_level = ATH10K_DBGLOG_LEVEL_WARN;
++		fw_dbglog_mask = ~0;
++	}
++
++	ath10k_wmi_dbglog_cfg(ar, fw_dbglog_mask, fw_dbglog_level);
++#endif
++
++store_regs:
++	/* After an error we will not retry setting the coverage class. */
++	spin_lock_bh(&ar->data_lock);
++	ar->fw_coverage.coverage_class = value;
++	spin_unlock_bh(&ar->data_lock);
++
++	ar->fw_coverage.reg_slottime_conf = slottime_reg;
++	ar->fw_coverage.reg_ack_cts_timeout_conf = timeout_reg;
++
++unlock:
++	mutex_unlock(&ar->conf_mutex);
++}
++
++const struct ath10k_hw_ops qca988x_ops = {
++	.set_coverage_class = ath10k_hw_qca988x_set_coverage_class,
++};
++
++const struct ath10k_hw_ops qca99x0_ops = {
++	.set_coverage_class = ath10k_hw_qca988x_set_coverage_class,
++};
+--- a/ath10k/hw.h
++++ b/ath10k/hw.h
+@@ -784,4 +784,35 @@ struct ath10k_fw_dbglog_hdr {
+ 	__le32 dropped;
+ } __packed;
+ 
++struct ath10k_hw_ops {
++	void (*set_coverage_class)(struct ath10k *ar, s16 value);
++};
++
++extern const struct ath10k_hw_ops qca988x_ops;
++extern const struct ath10k_hw_ops qca99x0_ops;
++
++/* Register definitions for first generation ath10k cards. These cards include
++ * a mac thich has a register allocation similar to ath9k and at least some
++ * registers including the ones relevant for modifying the coverage class are
++ * identical to the ath9k definitions.
++ * These registers are usually managed by the ath10k firmware. However by
++ * overriding them it is possible to support coverage class modifications.
++ */
++#define WAVE1_PCU_ACK_CTS_TIMEOUT               0x8014
++#define WAVE1_PCU_ACK_CTS_TIMEOUT_MAX           0x00003FFF
++#define WAVE1_PCU_ACK_CTS_TIMEOUT_ACK_MASK      0x00003FFF
++#define WAVE1_PCU_ACK_CTS_TIMEOUT_ACK_LSB       0
++#define WAVE1_PCU_ACK_CTS_TIMEOUT_CTS_MASK      0x3FFF0000
++#define WAVE1_PCU_ACK_CTS_TIMEOUT_CTS_LSB       16
++
++#define WAVE1_PCU_GBL_IFS_SLOT                  0x1070
++#define WAVE1_PCU_GBL_IFS_SLOT_MASK             0x0000FFFF
++#define WAVE1_PCU_GBL_IFS_SLOT_MAX              0x0000FFFF
++#define WAVE1_PCU_GBL_IFS_SLOT_LSB              0
++#define WAVE1_PCU_GBL_IFS_SLOT_RESV0            0xFFFF0000
++
++#define WAVE1_PHYCLK                            0x801C
++#define WAVE1_PHYCLK_USEC_MASK                  0x0000007F
++#define WAVE1_PHYCLK_USEC_LSB                   0
++
+ #endif /* _HW_H_ */
+--- a/ath10k/mac.c
++++ b/ath10k/mac.c
+@@ -5058,6 +5058,23 @@ static int ath10k_set_antenna(struct iee
+ 	return ret;
+ }
+ 
++static inline void ath10k_mac_queue_set_coverage_class_work(struct ath10k *ar)
++{
++	if (ar->hw_params.hw_ops->set_coverage_class) {
++		spin_lock_bh(&ar->data_lock);
++
++		/* This call only ensures that the modified coverage class
++		 * persists in case the firmware sets the registers back to
++		 * their default value. So calling it is only necessary if the
++		 * coverage class has a non-zero value.
++		 */
++		if (ar->fw_coverage.coverage_class)
++			queue_work(ar->workqueue, &ar->set_coverage_class_work);
++
++		spin_unlock_bh(&ar->data_lock);
++	}
++}
++
+ static int ath10k_start(struct ieee80211_hw *hw)
+ {
+ 	struct ath10k *ar = hw->priv;
+@@ -5076,10 +5093,12 @@ static int ath10k_start(struct ieee80211
+ 	switch (ar->state) {
+ 	case ATH10K_STATE_OFF:
+ 		ar->state = ATH10K_STATE_ON;
++		ath10k_mac_queue_set_coverage_class_work(ar);
+ 		break;
+ 	case ATH10K_STATE_RESTARTING:
+ 		ath10k_halt(ar);
+ 		ar->state = ATH10K_STATE_RESTARTED;
++		ath10k_mac_queue_set_coverage_class_work(ar);
+ 		break;
+ 	case ATH10K_STATE_ON:
+ 	case ATH10K_STATE_RESTARTED:
+@@ -6059,6 +6078,20 @@ static u32 ath10k_calc_ct_scan_flags(str
+ 	return rv;
+ }
+ 
++static void ath10k_mac_op_set_coverage_class(struct ieee80211_hw *hw, s16 value)
++{
++	struct ath10k *ar = hw->priv;
++
++	/* This function should never be called if setting the coverage class
++ 	 * is not supported on this hardware.
++	 */
++	if (!ar->hw_params.hw_ops->set_coverage_class) {
++		WARN_ON_ONCE(1);
++		return;
++	}
++	ar->hw_params.hw_ops->set_coverage_class(ar, value);
++}
++
+ static int ath10k_hw_scan(struct ieee80211_hw *hw,
+ 			  struct ieee80211_vif *vif,
+ 			  struct ieee80211_scan_request *hw_req)
+@@ -8222,6 +8255,7 @@ static const struct ieee80211_ops ath10k
+ 	.remove_interface		= ath10k_remove_interface,
+ 	.configure_filter		= ath10k_configure_filter,
+ 	.bss_info_changed		= ath10k_bss_info_changed,
++        .set_coverage_class             = ath10k_mac_op_set_coverage_class,
+ 	.hw_scan			= ath10k_hw_scan,
+ 	.cancel_hw_scan			= ath10k_cancel_hw_scan,
+ 	.set_key			= ath10k_set_key,
+@@ -8987,6 +9021,10 @@ int ath10k_mac_register(struct ath10k *a
+ 		      ar->running_fw->fw_file.fw_features))
+ 		ar->ops->wake_tx_queue = NULL;
+ 
++	/* Disable set_coverage_class for chipsets that do not support it. */
++	if (!ar->hw_params.hw_ops->set_coverage_class)
++		ar->ops->set_coverage_class = NULL;
++
+ 	ret = ath_regd_init(&ar->ath_common.regulatory, ar->hw->wiphy,
+ 			    ath10k_reg_notifier);
+ 	if (ret) {
+--- a/ath10k/wmi.c
++++ b/ath10k/wmi.c
+@@ -5123,6 +5123,23 @@ exit:
+ 	return 0;
+ }
+ 
++static inline void ath10k_wmi_queue_set_coverage_class_work(struct ath10k *ar)
++{
++	if (ar->hw_params.hw_ops->set_coverage_class) {
++		spin_lock_bh(&ar->data_lock);
++
++		/* This call only ensures that the modified coverage class
++		 * persists in case the firmware sets the registers back to
++		 * their default value. So calling it is only necessary if the
++		 * coverage class has a non-zero value.
++		 */
++		if (ar->fw_coverage.coverage_class)
++			queue_work(ar->workqueue, &ar->set_coverage_class_work);
++
++		spin_unlock_bh(&ar->data_lock);
++	}
++}
++
+ static void ath10k_wmi_op_rx(struct ath10k *ar, struct sk_buff *skb)
+ {
+ 	struct wmi_cmd_hdr *cmd_hdr;
+@@ -5143,6 +5160,7 @@ static void ath10k_wmi_op_rx(struct ath1
+ 		return;
+ 	case WMI_SCAN_EVENTID:
+ 		ath10k_wmi_event_scan(ar, skb);
++		ath10k_wmi_queue_set_coverage_class_work(ar);
+ 		break;
+ 	case WMI_CHAN_INFO_EVENTID:
+ 		ath10k_wmi_event_chan_info(ar, skb);
+@@ -5158,9 +5176,11 @@ static void ath10k_wmi_op_rx(struct ath1
+ 		break;
+ 	case WMI_VDEV_START_RESP_EVENTID:
+ 		ath10k_wmi_event_vdev_start_resp(ar, skb);
++		ath10k_wmi_queue_set_coverage_class_work(ar);
+ 		break;
+ 	case WMI_VDEV_STOPPED_EVENTID:
+ 		ath10k_wmi_event_vdev_stopped(ar, skb);
++		ath10k_wmi_queue_set_coverage_class_work(ar);
+ 		break;
+ 	case WMI_PEER_STA_KICKOUT_EVENTID:
+ 		ath10k_wmi_event_peer_sta_kickout(ar, skb);
+@@ -5176,6 +5196,7 @@ static void ath10k_wmi_op_rx(struct ath1
+ 		break;
+ 	case WMI_ROAM_EVENTID:
+ 		ath10k_wmi_event_roam(ar, skb);
++		ath10k_wmi_queue_set_coverage_class_work(ar);
+ 		break;
+ 	case WMI_PROFILE_MATCH:
+ 		ath10k_wmi_event_profile_match(ar, skb);
+@@ -5230,6 +5251,7 @@ static void ath10k_wmi_op_rx(struct ath1
+ 		return;
+ 	case WMI_READY_EVENTID:
+ 		ath10k_wmi_event_ready(ar, skb);
++		ath10k_wmi_queue_set_coverage_class_work(ar);
+ 		break;
+ 	default:
+ 		ath10k_warn(ar, "Unknown eventid: %d\n", id);
+@@ -5273,6 +5295,7 @@ static void ath10k_wmi_10_1_op_rx(struct
+ 		return;
+ 	case WMI_10X_SCAN_EVENTID:
+ 		ath10k_wmi_event_scan(ar, skb);
++		ath10k_wmi_queue_set_coverage_class_work(ar);
+ 		break;
+ 	case WMI_10X_CHAN_INFO_EVENTID:
+ 		ath10k_wmi_event_chan_info(ar, skb);
+@@ -5288,9 +5311,11 @@ static void ath10k_wmi_10_1_op_rx(struct
+ 		break;
+ 	case WMI_10X_VDEV_START_RESP_EVENTID:
+ 		ath10k_wmi_event_vdev_start_resp(ar, skb);
++		ath10k_wmi_queue_set_coverage_class_work(ar);
+ 		break;
+ 	case WMI_10X_VDEV_STOPPED_EVENTID:
+ 		ath10k_wmi_event_vdev_stopped(ar, skb);
++		ath10k_wmi_queue_set_coverage_class_work(ar);
+ 		break;
+ 	case WMI_10X_PEER_STA_KICKOUT_EVENTID:
+ 		ath10k_wmi_event_peer_sta_kickout(ar, skb);
+@@ -5306,6 +5331,7 @@ static void ath10k_wmi_10_1_op_rx(struct
+ 		break;
+ 	case WMI_10X_ROAM_EVENTID:
+ 		ath10k_wmi_event_roam(ar, skb);
++		ath10k_wmi_queue_set_coverage_class_work(ar);
+ 		break;
+ 	case WMI_10X_PROFILE_MATCH:
+ 		ath10k_wmi_event_profile_match(ar, skb);
+@@ -5351,6 +5377,7 @@ static void ath10k_wmi_10_1_op_rx(struct
+ 		return;
+ 	case WMI_10X_READY_EVENTID:
+ 		ath10k_wmi_event_ready(ar, skb);
++		ath10k_wmi_queue_set_coverage_class_work(ar);
+ 		break;
+ 	case WMI_10X_PDEV_UTF_EVENTID:
+ 		/* ignore utf events */
+@@ -5384,6 +5411,7 @@ static void ath10k_wmi_10_2_op_rx(struct
+ 		return;
+ 	case WMI_10_2_SCAN_EVENTID:
+ 		ath10k_wmi_event_scan(ar, skb);
++		ath10k_wmi_queue_set_coverage_class_work(ar);
+ 		break;
+ 	case WMI_10_2_CHAN_INFO_EVENTID:
+ 		ath10k_wmi_event_chan_info(ar, skb);
+@@ -5399,9 +5427,11 @@ static void ath10k_wmi_10_2_op_rx(struct
+ 		break;
+ 	case WMI_10_2_VDEV_START_RESP_EVENTID:
+ 		ath10k_wmi_event_vdev_start_resp(ar, skb);
++		ath10k_wmi_queue_set_coverage_class_work(ar);
+ 		break;
+ 	case WMI_10_2_VDEV_STOPPED_EVENTID:
+ 		ath10k_wmi_event_vdev_stopped(ar, skb);
++		ath10k_wmi_queue_set_coverage_class_work(ar);
+ 		break;
+ 	case WMI_10_2_PEER_STA_KICKOUT_EVENTID:
+ 		ath10k_wmi_event_peer_sta_kickout(ar, skb);
+@@ -5453,15 +5483,18 @@ static void ath10k_wmi_10_2_op_rx(struct
+ 		break;
+ 	case WMI_10_2_VDEV_STANDBY_REQ_EVENTID:
+ 		ath10k_wmi_event_vdev_standby_req(ar, skb);
++		ath10k_wmi_queue_set_coverage_class_work(ar);
+ 		break;
+ 	case WMI_10_2_VDEV_RESUME_REQ_EVENTID:
+ 		ath10k_wmi_event_vdev_resume_req(ar, skb);
++		ath10k_wmi_queue_set_coverage_class_work(ar);
+ 		break;
+ 	case WMI_10_2_SERVICE_READY_EVENTID:
+ 		ath10k_wmi_event_service_ready(ar, skb);
+ 		return;
+ 	case WMI_10_2_READY_EVENTID:
+ 		ath10k_wmi_event_ready(ar, skb);
++		ath10k_wmi_queue_set_coverage_class_work(ar);
+ 		break;
+ 	case WMI_10_2_PDEV_TEMPERATURE_EVENTID:
+ 		ath10k_wmi_event_temperature(ar, skb);
+@@ -5517,6 +5550,7 @@ static void ath10k_wmi_10_4_op_rx(struct
+ 		return;
+ 	case WMI_10_4_SCAN_EVENTID:
+ 		ath10k_wmi_event_scan(ar, skb);
++		ath10k_wmi_queue_set_coverage_class_work(ar);
+ 		break;
+ 	case WMI_10_4_CHAN_INFO_EVENTID:
+ 		ath10k_wmi_event_chan_info(ar, skb);
+@@ -5526,6 +5560,7 @@ static void ath10k_wmi_10_4_op_rx(struct
+ 		break;
+ 	case WMI_10_4_READY_EVENTID:
+ 		ath10k_wmi_event_ready(ar, skb);
++		ath10k_wmi_queue_set_coverage_class_work(ar);
+ 		break;
+ 	case WMI_10_4_PEER_STA_KICKOUT_EVENTID:
+ 		ath10k_wmi_event_peer_sta_kickout(ar, skb);
+@@ -5541,9 +5576,11 @@ static void ath10k_wmi_10_4_op_rx(struct
+ 		break;
+ 	case WMI_10_4_VDEV_START_RESP_EVENTID:
+ 		ath10k_wmi_event_vdev_start_resp(ar, skb);
++		ath10k_wmi_queue_set_coverage_class_work(ar);
+ 		break;
+ 	case WMI_10_4_VDEV_STOPPED_EVENTID:
+ 		ath10k_wmi_event_vdev_stopped(ar, skb);
++		ath10k_wmi_queue_set_coverage_class_work(ar);
+ 		break;
+ 	case WMI_10_4_WOW_WAKEUP_HOST_EVENTID:
+ 	case WMI_10_4_PEER_RATECODE_LIST_EVENTID:
+--- a/ath10k/debug.h
++++ b/ath10k/debug.h
+@@ -105,6 +105,17 @@ void ath10k_debug_get_et_stats(struct ie
+ 			       struct ethtool_stats *stats, u64 *data);
+ 
+ void ath10k_dbg_save_fw_dbg_buffer(struct ath10k *ar, __le32 *buffer, int len);
++
++static inline u64 ath10k_debug_get_fw_dbglog_mask(struct ath10k *ar)
++{
++	return ar->debug.fw_dbglog_mask;
++}
++
++static inline u32 ath10k_debug_get_fw_dbglog_level(struct ath10k *ar)
++{
++	return ar->debug.fw_dbglog_level;
++}
++
+ #else
+ static inline void ath10k_dbg_save_fw_dbg_buffer(struct ath10k *ar,
+ 						 __le32 *buffer, int len)
+@@ -159,6 +170,16 @@ ath10k_debug_get_new_fw_crash_data(struc
+ 	return NULL;
+ }
+ 
++static inline u64 ath10k_debug_get_fw_dbglog_mask(struct ath10k *ar)
++{
++	return 0;
++}
++
++static inline u32 ath10k_debug_get_fw_dbglog_level(struct ath10k *ar)
++{
++	return 0;
++}
++
+ #define ATH10K_DFS_STAT_INC(ar, c) do { } while (0)
+ 
+ #define ath10k_debug_get_et_strings NULL
