Index: build_dir/target/linux/ramips/dts/mt7621_mikrotik_routerboard-m11g.dts
===================================================================
--- build_dir.orig/target/linux/ramips/dts/mt7621_mikrotik_routerboard-m11g.dts
+++ build_dir/target/linux/ramips/dts/mt7621_mikrotik_routerboard-m11g.dts
@@ -62,8 +62,17 @@
 	partition@40000 {
 		compatible = "mikrotik,minor";
 		label = "firmware";
-		reg = <0x040000 0xfc0000>;
+		reg = <0x040000 0xfb0000>;
 	};
+
+	imagestream: partition@FFF000 {
+		label = "imagestream";
+		reg = <0xfff000 0x1000>;
+	};
+};
+
+&gmac0 {
+	mtd-mac-address = <&imagestream 0x0010>;
 };
 
 &ethernet {
Index: build_dir/target/linux/ramips/image/mt7621.mk
===================================================================
--- build_dir.orig/target/linux/ramips/image/mt7621.mk
+++ build_dir/target/linux/ramips/image/mt7621.mk
@@ -1632,7 +1632,7 @@ TARGET_DEVICES += mercusys_mr70x-v1
 define Device/MikroTik
   $(Device/dsa-migration)
   DEVICE_VENDOR := MikroTik
-  IMAGE_SIZE := 16128k
+  IMAGE_SIZE := 16124k
   DEVICE_PACKAGES := kmod-usb3 -uboot-envtools
   KERNEL_NAME := vmlinuz
   KERNEL := kernel-bin | append-dtb-elf
Index: build_dir/target/linux/ramips/base-files/etc/hotplug.d/ieee80211/10_fix_wifi_mac
===================================================================
--- /dev/null
+++ build_dir/target/linux/ramips/base-files/etc/hotplug.d/ieee80211/10_fix_wifi_mac
@@ -0,0 +1,47 @@
+#!/bin/ash
+
+[ "$ACTION" == "add" ] || exit 0
+
+PHYNBR=${DEVPATH##*/phy}
+
+[ -n $PHYNBR ] || exit 0
+
+. /lib/functions.sh
+. /lib/functions/system.sh
+. /usr/share/libubox/jshn.sh
+
+function process_macs() {
+	let i=0
+	while [ ! -z $1 ]; do
+		var="mac${i}"
+		eval $var=$1
+		shift
+		let i=i+1
+	done
+}
+
+function process_imagestream() {
+	mtd_dev=$(grep imagestream /proc/mtd | cut -d ':' -f 1)
+	json_load "$(dd if=/dev/$mtd_dev bs=1 skip=256)"
+	json_get_values _macs mac_addrs
+	process_macs $_macs
+}
+
+board=$(board_name)
+
+case "$board" in
+	mikrotik,routerboard-m11g)
+		# Use our reserved MAC address instead of the card's MAC
+		process_imagestream
+		if [ "$PHYNBR" -eq 1 ]; then
+			if [ -n "$mac2" ]; then
+				echo $mac2 > /sys${DEVPATH}/macaddress
+			fi
+		elif [ "$PHYNBR" -eq 0 ] && [ -n "$mac3" ]; then
+			echo $mac3 > /sys${DEVPATH}/macaddress
+		fi
+		;;
+	*)
+		;;
+esac
+
Index: build_dir/target/linux/x86/base-files/etc/hotplug.d/ieee80211/10_fix_wifi_mac
===================================================================
--- /dev/null
+++ build_dir/target/linux/x86/base-files/etc/hotplug.d/ieee80211/10_fix_wifi_mac
@@ -0,0 +1,48 @@
+#!/bin/ash
+
+[ "$ACTION" == "add" ] || exit 0
+
+PHYNBR=${DEVPATH##*/phy}
+
+[ -n $PHYNBR ] || exit 0
+
+. /lib/functions.sh
+. /lib/functions/system.sh
+. /usr/share/libubox/jshn.sh
+
+function process_macs() {
+       let i=0
+       while [ ! -z $1 ]; do
+               var="mac${i}"
+               eval $var=$1
+               shift
+               let i=i+1
+       done
+}
+
+function process_imagestream() {
+       is_dev="mmcblk0"
+       grep $is_dev /proc/partitions > /dev/null 2>&1 || return 1
+       json_load "$(dd if=/dev/mmcblk0 bs=1k count=4 skip=$(($(awk '$4 == "mmcblk0" { print $3}' < /proc/partitions) - 4)) | dd bs=1 skip=256 2>/dev/null)"
+       json_get_values _macs mac_addrs
+       process_macs $_macs
+       return 0
+}
+
+board=$(board_name)
+
+case "$board" in
+       pc-engines-apu2)
+               # Use our reserved MAC address instead of the card's MAC
+               process_imagestream || return 0
+
+	       mac=$(eval echo \$mac$((PHYNBR+3)))
+               if [ -n "${mac}" ]; then
+			echo "${mac}" > /sys${DEVPATH}/macaddress
+		fi
+               ;;
+       *)
+               ;;
+esac
+
+
Index: build_dir/target/linux/bcm27xx/base-files/etc/hotplug.d/ieee80211/10_fix_wifi_mac
===================================================================
--- /dev/null
+++ build_dir/target/linux/bcm27xx/base-files/etc/hotplug.d/ieee80211/10_fix_wifi_mac
@@ -0,0 +1,48 @@
+#!/bin/ash
+
+[ "$ACTION" == "add" ] || exit 0
+
+PHYNBR=${DEVPATH##*/phy}
+
+[ -n $PHYNBR ] || exit 0
+
+. /lib/functions.sh
+. /lib/functions/system.sh
+. /usr/share/libubox/jshn.sh
+
+function process_macs() {
+       let i=0
+       while [ ! -z $1 ]; do
+               var="mac${i}"
+               eval $var=$1
+               shift
+               let i=i+1
+       done
+}
+
+function process_imagestream() {
+       is_dev="mmcblk0"
+       grep $is_dev /proc/partitions > /dev/null 2>&1 || return 1
+       json_load "$(dd if=/dev/mmcblk0 bs=1k count=4 skip=$(($(awk '$4 == "mmcblk0" { print $3}' < /proc/partitions) - 4)) | dd bs=1 skip=256 2>/dev/null)"
+       json_get_values _macs mac_addrs
+       process_macs $_macs
+       return 0
+}
+
+board=$(board_name)
+
+case "$board" in
+       raspberrypi,4-compute-module)
+               # Use our reserved MAC address instead of the card's MAC
+               process_imagestream || return 0
+
+	       mac=$(eval echo \$mac$((PHYNBR+2)))
+               if [ -n "${mac}" ]; then
+			echo "${mac}" > /sys${DEVPATH}/macaddress
+		fi
+               ;;
+       *)
+               ;;
+esac
+
+
